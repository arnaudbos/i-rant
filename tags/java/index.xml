<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Arnaud Bos</title>
    <link>https://i-rant.arnaudbos.com/tags/java/</link>
    <description>Recent content in Java on Arnaud Bos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 24 Dec 2019 14:21:35 +0100</lastBuildDate>
    
	<atom:link href="https://i-rant.arnaudbos.com/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Loom - Part 4 - Non-blocking Asynchronous I/O</title>
      <link>https://i-rant.arnaudbos.com/loom-part-4-nio/</link>
      <pubDate>Tue, 24 Dec 2019 14:21:35 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-4-nio/</guid>
      <description>Part 4 in a series of articles about Project Loom.
In this part we re-implement our proxy service with non-thread-blocking asynchronous java NIO.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
Part 3 - Asynchronous code
   機織り  Yanagawa Shigenobu CC0 1.0    Asynchronous thread blocking API, seen in the previous entry, are nice because they block other threads.</description>
    </item>
    
    <item>
      <title>Loom - Part 3 - Asynchronous code</title>
      <link>https://i-rant.arnaudbos.com/loom-part-3-async/</link>
      <pubDate>Mon, 23 Dec 2019 18:56:06 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-3-async/</guid>
      <description>Part 3 in a series of articles about Project Loom.
In this part we re-implement our proxy service with an asynchronous API.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
   Atelier de couture  J. Trayer 1854 CC0 1.0    We&amp;rsquo;ve covered a lot of ground in the previous entries and we concluded that blocking code &amp;ldquo;is bad&amp;rdquo; ©.</description>
    </item>
    
    <item>
      <title>Loom - Part 2 - Blocking code</title>
      <link>https://i-rant.arnaudbos.com/loom-part-2-blocking/</link>
      <pubDate>Wed, 18 Dec 2019 12:11:16 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-2-blocking/</guid>
      <description>Part 2 in a series of articles about Project Loom.
In this part we implement a proxy service, the easiest way possible.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 3 - Asynchronous code
   Weaving  Max Pixel CC0 1.0    A simple use case One of the biggest pain points I had learning about concurrent programming was the emphasis put on Blocking, Non-blocking, Synchronous and Asynchronous code.</description>
    </item>
    
    <item>
      <title>Loom - Part 1 - It&#39;s all about Scheduling</title>
      <link>https://i-rant.arnaudbos.com/loom-part-1-scheduling/</link>
      <pubDate>Sat, 14 Dec 2019 15:38:37 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-1-scheduling/</guid>
      <description>Part 1 in a series of articles about Project Loom.
In this part we skim the surface of scheduling history before diving into the JVM.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 2 - Blocking code
Part 3 - Asynchronous code
   Jacquard Loom  Stephencdickson CC BY-SA 4.0    There&amp;rsquo;s only one hard problem The first problem with concurrency (and computer science in general), is that we&amp;rsquo;re extremely bad at naming things.</description>
    </item>
    
    <item>
      <title>Loom - Part 0 - Rationale</title>
      <link>https://i-rant.arnaudbos.com/loom-part-0-rationale/</link>
      <pubDate>Sat, 14 Dec 2019 15:38:21 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-0-rationale/</guid>
      <description>Part 0 in a series of articles about Project Loom.
In this part I just talk about me, me, me, me and why I wrote this.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
Part 3 - Asynchronous code
 Finding good introduction level articles on concurrent programming is difficult because every post assumes some prior knowledge.</description>
    </item>
    
    <item>
      <title>Loom</title>
      <link>https://i-rant.arnaudbos.com/loom/</link>
      <pubDate>Mon, 04 Nov 2019 12:23:00 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom/</guid>
      <description>So asynchronous thread blocking APIs are nice because they&amp;rsquo;re blocking other threads, but the problem of memory footprint of kernel threads and context switches still remains.
Truly non-blocking asynchronous APIs rely on event loops and fine tuned implementation techniques such as work stealing and drain loops in order to maximize CPU utilisation.
But they rely on callbacks too, which leads to the infamous callback-hell that.
TODO: Yup, rework this part, heavily.</description>
    </item>
    
    <item>
      <title>2D Transformations with Android and Java</title>
      <link>https://i-rant.arnaudbos.com/2d-transformations-android-java/</link>
      <pubDate>Tue, 07 Feb 2017 02:30:04 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/2d-transformations-android-java/</guid>
      <description>I my previous post, &amp;ldquo;Matrices for developers&amp;rdquo;, I&amp;rsquo;ve talked about matrices and how they can be used to compute 2D transformations.
In this post, I want to talk about how to apply what we know about matrices in order to perform 2D transformations, first using Java AWT and then with the Android SDK.
Affine transformations with Java When I was working on the project I mentioned at the beginning of the previous article, I was constantly moving back and forth between the JDK&amp;rsquo;s implementation of affine transformations and the Android SDK&amp;rsquo;s implementation of matrices.</description>
    </item>
    
  </channel>
</rss>