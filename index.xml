<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Arnaud Bos</title>
    <link>http://www.arnaudbos.com/index.xml</link>
    <description>Recent content on Arnaud Bos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 19 Dec 2016 15:08:23 +0100</lastBuildDate>
    <atom:link href="http://www.arnaudbos.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2D Transformations with Android</title>
      <link>http://www.arnaudbos.com/2d-transformations-android/</link>
      <pubDate>Mon, 19 Dec 2016 15:08:23 +0100</pubDate>
      
      <guid>http://www.arnaudbos.com/2d-transformations-android/</guid>
      <description>

&lt;p&gt;A few weeks ago I was on an &lt;code&gt;android-user-group&lt;/code&gt; channel,
when someone posted a question about Android&amp;rsquo;s
&lt;a href=&#34;https://developer.android.com/reference/android/graphics/Matrix.html#postScale(float,%20float,%20float,%20float)&#34;&gt;Matrix.postScale(sx, sy, px, py)&lt;/a&gt; method and how it works
because it was &lt;em&gt;&amp;ldquo;hard to grasp&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Coincidence: a few months ago, at the beginning of 2016, I finished a freelance
project on an &lt;a href=&#34;https://play.google.com/store/apps/details?id=fr.climbingaway&#34;&gt;Android application&lt;/a&gt; where I had to implement
an exciting feature:&lt;/p&gt;

&lt;p&gt;The user, after buying and downloading a digital topography of a crag, had
be able to view the crag which was composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a picture of the cliff,&lt;/li&gt;
&lt;li&gt;a SVG file containing the overlay of the climbing routes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The user had to have the ability to pan and zoom at will and have the routes
layer &amp;ldquo;&lt;em&gt;follow&lt;/em&gt;&amp;rdquo; the picture.&lt;/p&gt;

&lt;div class=&#34;gallery&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;

  &lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-1.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1080x1920&#34;&gt;
      &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-1.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Climbing away - App screenshot 1&#34; width=&#34;80&#34; height=&#34;142&#34; /&gt;
  &lt;/a&gt;

  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Climbing away - App screenshot 1
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

  &lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-2.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1080x1920&#34;&gt;
      &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-2.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Climbing away - App screenshot 2&#34; width=&#34;80&#34; height=&#34;142&#34; /&gt;
  &lt;/a&gt;

  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Climbing away - App screenshot 2
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

  &lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-3.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1080x1920&#34;&gt;
      &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-3.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Climbing away - App screenshot 3&#34; width=&#34;80&#34; height=&#34;142&#34; /&gt;
  &lt;/a&gt;

  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Climbing away - App screenshot 3
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;div class=&#34;title&#34;&gt;Android app screenshots&lt;/div&gt;
&lt;/div&gt;


&lt;h2 id=&#34;technical-challenge&#34;&gt;Technical challenge&lt;/h2&gt;

&lt;p&gt;In order to have the overlay of routes follow the user&amp;rsquo;s actions, I found I
had to get my hands dirty by overloading an Android &lt;code&gt;ImageView&lt;/code&gt;, draw onto the
&lt;code&gt;Canvas&lt;/code&gt; and deal with finger gestures.&lt;br /&gt;
As a good engineer: I searched on Stack Overflow ðŸ˜…&lt;br /&gt;
And I discovered I&amp;rsquo;d need the &lt;code&gt;android.graphics.Matrix&lt;/code&gt; class for 2D
transformations.&lt;/p&gt;

&lt;p&gt;The problem with this class, is that it might seem obvious what it does, but if
you have no mathematical background, it&amp;rsquo;s still quite mysterious.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;boolean postScale (float sx, float sy, float px, float py)&lt;/p&gt;

&lt;p&gt;Postconcats the matrix with the specified scale. M&amp;rsquo; = S(sx, sy, px, py) * M&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, cool, so it &lt;em&gt;scales&lt;/em&gt; something with some parameters and it does it with
some kind of multiplication. I don&amp;rsquo;t get it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What does it do exactly? Scales a matrix? What&amp;rsquo;s that supposed to mean, I
want to scale the canvas&amp;hellip;&lt;/li&gt;
&lt;li&gt;What should I use, &lt;code&gt;preScale&lt;/code&gt; of &lt;code&gt;postScale&lt;/code&gt;? Do I try both while I get the
input parameters from my gesture detection code and enter an infite loop of
trial and error guesstimates? (No. Way.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So at this very moment of the development process I realized I needed to learn
basic math skills about &lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_(mathematics)&#34;&gt;matrices&lt;/a&gt; that I had forgotten many
years ago, after finishing my first two years of uni ðŸ˜±&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;WWW to the rescue!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While searching around I&amp;rsquo;ve found a number of good resources and was able to
learn some math again, and it felt great. It also helped me solve my 2D
transformations problems by applying my understandings as code in Java and
Android.&lt;/p&gt;

&lt;p&gt;So, given the discussion I&amp;rsquo;ve had on the channel I&amp;rsquo;ve mentioned above, it
seems I was not the only one struggling with matrices, trying to make sense of
it and using these skills with Android&amp;rsquo;s Matrix class and methods,
so I thought I&amp;rsquo;d write an article.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;

&lt;div id=&#34;toc&#34; class=&#34;well col-md-12&#34;&gt;
  &lt;!-- toc --&gt;
&lt;/div&gt;

&lt;h2 id=&#34;affine-transformations-with-java&#34;&gt;Affine transformations with Java&lt;/h2&gt;

&lt;p&gt;When I was working on the project I mentioned at the beginning of this article,
I was constantly moving back and forth between the
&lt;a href=&#34;https://docs.oracle.com/javase/7/docs/api/java/awt/geom/AffineTransform.html&#34;&gt;JDK&amp;rsquo;s implementation of affine transformations&lt;/a&gt; and the
&lt;a href=&#34;https://developer.android.com/reference/android/graphics/Matrix.html&#34;&gt;Android SDK&amp;rsquo;s implementation of matrices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I find the &lt;code&gt;java.awt.geom.AffineTransform&lt;/code&gt; class fairly well featured
but not that much, plus it is a bit ambiguous. Fortunately, the documentation is
good, it&amp;rsquo;s not perfect but at least it&amp;rsquo;s better than Android&amp;rsquo;s one on this
topic as we shall see later.&lt;/p&gt;

&lt;p&gt;The Javadoc starts with a reminder of what are 2D affine transformations and a
matrix multiplication pattern to transform coordinates.&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix}
x&#39;\\
y&#39;\\
1
\end{bmatrix}
=
\begin{bmatrix}
m00 &amp; m01 &amp; m02\\
m10 &amp; m11 &amp; m12\\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
x\\
y\\
1
\end{bmatrix}
=
\begin{bmatrix}
m00 . x + m01 . y + m02\\
m10 . x + m11 . y + m12\\
1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;That&amp;rsquo;s neat, you have to appreciate the effort there (I mean, is your
Javadoc that great? ðŸ˜‡ ), and Android&amp;rsquo;s Javadoc doesn&amp;rsquo;t have it so&amp;hellip;&lt;/p&gt;

&lt;p&gt;The way this pattern is written lets us see a glimpse of implementation details,
right? Those &lt;code&gt;m00&lt;/code&gt;, &lt;code&gt;m01&lt;/code&gt; and etc, they (not so) strangely resemble stringified
versions of indexes in a two-dimensional array.&lt;/p&gt;

&lt;h3 id=&#34;ambiguous-part-1&#34;&gt;Ambiguous â€” Part 1&lt;/h3&gt;

&lt;p&gt;So what is &lt;em&gt;&amp;ldquo;ambiguous&amp;rdquo;&lt;/em&gt; with this class? Granted it might be a matter of taste,
but if you look at the constructor
&lt;code&gt;AffineTransform(m00, m10, m01, m11, m02, m12)&lt;/code&gt; and the method
&lt;code&gt;setTransform(m00, m10, m01, m11, m02, m12)&lt;/code&gt;, they only take 6 input
parameters.&lt;/p&gt;

&lt;p&gt;While it makes perfectly sense to not take as inputs parameters that are fixed
(&lt;code&gt;0, 0, 1&lt;/code&gt;) in the context of 2D affine transformations, I find it disturbing.&lt;/p&gt;

&lt;p&gt;More disturbing perhaps, is the ordering of those parameters.&lt;/p&gt;

&lt;p&gt;If you make the parallel between those and our &lt;code&gt;$a$&lt;/code&gt;, &lt;code&gt;$b$&lt;/code&gt;, etc. to the &lt;code&gt;$i$&lt;/code&gt;
values we saw in the matrices above, you notice that the reading direction is not the
same.&lt;br /&gt;
With &lt;code&gt;$a$&lt;/code&gt;, &lt;code&gt;$b$&lt;/code&gt;, etc., we used to read more &lt;em&gt;&amp;ldquo;naturally&amp;rdquo;&lt;/em&gt; I would say, like
normal english written text: line by line.&lt;br /&gt;
Whereas &lt;code&gt;$m00$&lt;/code&gt;, &lt;code&gt;$m10$&lt;/code&gt;, etc. is reading the matrix column by column.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not saying one is better than the other, just that I&amp;rsquo;m more familiar with
the first one, and that it&amp;rsquo;s worth pointing at it to clarify the use of this
class. Because the &lt;code&gt;getMatrix(flatmatrix)&lt;/code&gt; method will fill in an
array containing the entries of the matrix in that specific order.&lt;br /&gt;
Also, &lt;code&gt;getMatrix&lt;/code&gt; &lt;em&gt;&amp;ldquo;Retrieves the 6 specifiable values in the 3x3 affine
transformation matrix&amp;rdquo;&lt;/em&gt;, which means it will only give you those &lt;code&gt;$m00$&lt;/code&gt;,
&lt;code&gt;$m10$&lt;/code&gt;, etc., entries, not the ones from the third row.&lt;/p&gt;

&lt;h3 id=&#34;well-featured-but-not-that-much&#34;&gt;Well featured but not that much&lt;/h3&gt;

&lt;p&gt;To understand what I mean, let&amp;rsquo;s try to execute the kind of transformations we
have seen throughout the first part of this article.&lt;/p&gt;

&lt;h5 id=&#34;1-can-we-translate&#34;&gt;1. Can we translate?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;translate(tx, ty)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates this transform with a translation transformation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We&amp;rsquo;ll see what &amp;ldquo;concatenates&amp;rdquo; means in this context in a moment, for now what
we understand is that we have a method to apply a translation transformation.&lt;/p&gt;

&lt;h5 id=&#34;2-can-we-shear&#34;&gt;2. Can we shear?&lt;/h5&gt;

&lt;p&gt;Yes, but only by constants, not by angles, we have &lt;code&gt;shear(shx, shy)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates this transform with a shearing transformation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;3-can-we-scale&#34;&gt;3. Can we scale?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;scale(sx, sy)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates this transform with a scaling transformation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;4-can-we-reflect&#34;&gt;4. Can we reflect?&lt;/h5&gt;

&lt;p&gt;Not directly, at least I don&amp;rsquo;t see anything doing a reflexion directly, so we
either have to scale by negative values, or to use
&lt;code&gt;setTransform(-1, 0, 0, -1, 0, 0)&lt;/code&gt; (for example) manually and then
&lt;code&gt;concatenate&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;5-can-we-rotate&#34;&gt;5. Can we rotate?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;rotate(theta)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates this transform with a rotation transformation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Beware: &lt;code&gt;theta&lt;/code&gt; here is in radians, not in degrees.&lt;/p&gt;

&lt;h5 id=&#34;6-can-we-scale-on-an-anchor-point&#34;&gt;6. Can we scale on an anchor point?&lt;/h5&gt;

&lt;p&gt;No. You will have to compose your transformation as we&amp;rsquo;ve done it &amp;ldquo;by hand&amp;rdquo;
above, with a combination of &lt;code&gt;scale(sx, sy)&lt;/code&gt; and &lt;code&gt;translate(tx, ty)&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;7-can-we-rotate-around-an-anchor-point&#34;&gt;7. Can we rotate around an anchor point?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;rotate(theta, anchorx, anchory)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates this transform with a transform that rotates coordinates around
an anchor point.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;8-can-we-transform-points&#34;&gt;8. Can we transform points?&lt;/h5&gt;

&lt;p&gt;Yes! We have several methods available in order to transform points (even
shapes) from their original position to their new coordinates after the
transformation has been applied.&lt;/p&gt;

&lt;h5 id=&#34;why-am-i-not-happy-with-this&#34;&gt;Why am I not happy with this?&lt;/h5&gt;

&lt;p&gt;I am, actually, and there are more methods that allow you to do interesting
stuff with this class.&lt;br /&gt;
I&amp;rsquo;m just wondering why they decided to implement
&lt;code&gt;rotate(theta, anchorx, anchory)&lt;/code&gt; but not
&lt;code&gt;scale(sx, sy, anchorx, anchory)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;On the other hand, all the methods I&amp;rsquo;ve outlined above are quite opinionated.
Why? Because they assume that what you want to do is:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates this transform with a transformation&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;An that&amp;rsquo;s where bad stuff happen.&lt;/p&gt;

&lt;h3 id=&#34;ambiguous-part-2&#34;&gt;Ambiguous â€” Part 2&lt;/h3&gt;

&lt;p&gt;All the transformations we&amp;rsquo;ve seen in the first part of this article are
defined this way:&lt;/p&gt;

&lt;div&gt;
$$
P&#39; = \mathbf{T}.P
$$
&lt;/div&gt;

&lt;p&gt;Where:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$P$&lt;/code&gt; is a point&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$P&#39;$&lt;/code&gt; is the point where &lt;code&gt;$P$&lt;/code&gt; will land after the transformation has been applied&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$\mathbf{T}$&lt;/code&gt; is a transformation matrix&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$\mathbf{T}$&lt;/code&gt; is the product of many transformations matrices, applied
in the reverse order: that is for transforming by &lt;code&gt;$\mathbf{A}$&lt;/code&gt;, then
&lt;code&gt;$\mathbf{B}$&lt;/code&gt;, then &lt;code&gt;$\mathbf{C}$&lt;/code&gt; we have
&lt;code&gt;$\mathbf{T} = \mathbf{C} . \mathbf{B} . \mathbf{A} $&lt;/code&gt;, and reciprocally.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now, look at the definition of the description of the
&lt;code&gt;concatenate(AffineTransform Tx)&lt;/code&gt; method:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Concatenates an AffineTransform Tx to this AffineTransform Cx in the most commonly useful way to provide a new user space that is mapped to the former user space by Tx. Cx is updated to perform the combined transformation. Transforming a point p by the updated transform Cx&amp;rsquo; is equivalent to first transforming p by Tx and then transforming the result by the original transform Cx like this: Cx&amp;rsquo;(p) = Cx(Tx(p)) In matrix notation, if this transform Cx is represented by the matrix &lt;strong&gt;[this&lt;/strong&gt;] and Tx is represented by the matrix &lt;strong&gt;[Tx&lt;/strong&gt;] then this method does the following:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[this&lt;/strong&gt;] = &lt;strong&gt;[this&lt;/strong&gt;] x &lt;strong&gt;[Tx&lt;/strong&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In our notation this gives that for transforming by &lt;code&gt;$\mathbf{A}$&lt;/code&gt;, then
&lt;code&gt;$\mathbf{B}$&lt;/code&gt;, then &lt;code&gt;$\mathbf{C}$&lt;/code&gt; we have:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{this}
=
\left( \left( \mathbf{this} . \mathbf{A} \right) . \mathbf{B} \right) . \mathbf{C}\\
\Leftrightarrow
\mathbf{this} = \mathbf{this} . \mathbf{Tx}
\text{ where }
\mathbf{Tx} = \mathbf{A} . \mathbf{B} . \mathbf{C}
$$
&lt;/div&gt;

&lt;p&gt;This is very different than:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{this} = \mathbf{Tx} . \mathbf{this}
\text{ where }
\mathbf{Tx} = \mathbf{A} . \mathbf{B} . \mathbf{C}
$$
&lt;/div&gt;

&lt;p&gt;As we&amp;rsquo;ve seen, matrix multiplication is non-commutative, so this will lead to
very different results than what you might expect!&lt;/p&gt;

&lt;p&gt;The good news: there&amp;rsquo;s a method &lt;code&gt;preConcatenate(AffineTransform Tx)&lt;/code&gt; that does
what we want:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;[this&lt;/strong&gt;] = &lt;strong&gt;[Tx&lt;/strong&gt;] x &lt;strong&gt;[this&lt;/strong&gt;]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;The bad news: you won&amp;rsquo;t be able to represent your transformations with the
built-in &lt;code&gt;translate&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt;, &lt;code&gt;rotate&lt;/code&gt; as is. Because they don&amp;rsquo;t behave the
way you think.&lt;br /&gt;
At least they don&amp;rsquo;t behave the way &lt;strong&gt;&lt;em&gt;I&lt;/em&gt;&lt;/strong&gt; think about transformations, which is
the one I&amp;rsquo;ve described in the matrices section above.&lt;/p&gt;

&lt;p&gt;Honestly, I don&amp;rsquo;t know what the Javadoc means by &lt;em&gt;&amp;ldquo;in the most commonly useful
way to provide a new user space&amp;rdquo;&lt;/em&gt;. I&amp;rsquo;m sure it makes sense for some, but I
don&amp;rsquo;t get it.&lt;/p&gt;

&lt;p&gt;So how do we use the &lt;code&gt;AffineTransform&lt;/code&gt; class to chain our transformations the
way we want?&lt;br /&gt;
Fortunately, the class provides us with a bunch of useful static methods that
return new matrices that are ready to use and can be combined by using the
&lt;code&gt;preConcatenate&lt;/code&gt; method:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;AffineTransform.getTranslateInstance(tx, ty)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AffineTransform.getRotateInstance(theta)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AffineTransform.getScaleInstance(sx, sy)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;AffineTransform.getShearInstance(shx, shy)&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For instance, the 2x zoom at the center of the rectangle from our previous
example can be achieved in the following way:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;package com.arnaudbos.java2d;
// imports stripped

public class AffineTransformZoomExample {
    // code stripped

    private static class ZoomCanvas extends JComponent {

        public void paint(Graphics g) {
            Graphics2D ourGraphics = (Graphics2D) g;

            // code stripped

            // Draw initial object
            ourGraphics.setColor(Color.black);
            ourGraphics.drawRect(100, 100, 100, 100);

            // Create matrix (set to identity by default)
            AffineTransform tx = new AffineTransform();

            // This is not the transformation you&#39;re looking for
            tx.translate(-150, -150);
            tx.scale(2, 2);
            tx.translate(150, 150);
            ourGraphics.setTransform(tx);
            ourGraphics.setColor(Color.red);
            ourGraphics.drawRect(100, 100, 100, 100);

            // Reset matrix to identity to clear previous transformations
            tx.setToIdentity();

            // Apply our transformations in order to zoom-in the square
            tx.preConcatenate(AffineTransform.getTranslateInstance(-150, -150));
            tx.preConcatenate(AffineTransform.getScaleInstance(2, 2));
            tx.preConcatenate(AffineTransform.getTranslateInstance(150, 150));
            ourGraphics.setTransform(tx);
            ourGraphics.setColor(Color.green);
            ourGraphics.drawRect(100, 100, 100, 100);
        }
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;hr /&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/2d-transformations-android/java-zoom-at-center.png&#34; alt=&#34;Demo of Java 2D zooming&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Demo of Java 2D zooming: in black the original square, in red the unexpected transformation and in green the desired transformation&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;h2 id=&#34;affine-transformations-with-android&#34;&gt;Affine transformations with Android&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;TODO: Insert links and snippets of code showing research: android native source code + c++ matrix library&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Unlike Oracle, Google&amp;rsquo;s &lt;code&gt;android.graphics.Matrix&lt;/code&gt; class assumes you already
know your way around matrices. There&amp;rsquo;s no reminders, no details about matrices,
no explanations.&lt;br /&gt;
Nonetheless, the API is good and well featured, as long as you understand a
few things.&lt;/p&gt;

&lt;h3 id=&#34;construction&#34;&gt;Construction&lt;/h3&gt;

&lt;p&gt;Unlike Java, Android provides ways of building matrices that seem more
explicit and straightforward to me.&lt;/p&gt;

&lt;p&gt;The first thing we see in the Javadoc is a bunch of constants that are used to
describe each entry in the matrix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;int MPERSP_0 = 6&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPERSP_1 = 7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MPERSP_2 = 8&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MSCALE_X = 0&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MSCALE_Y = 4&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MSKEW_X = 1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MSKEW_Y = 3&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MTRANS_X = 2&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;int MTRANS_Y = 5&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Put this back ordered by their value and now look at:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;setValues(values)&lt;/code&gt;: &lt;em&gt;&amp;ldquo;Copy 9 values from the array into the matrix.&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;getValues(values)&lt;/code&gt;: &lt;em&gt;&amp;ldquo;Copy 9 values from the matrix into the array.&amp;rdquo;&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What we see here is, I think, a more explicit API than the Java one: you are
dealing with a 3x3 dimensions matrix, so you specify/retrieve the 9 entries
that this matrix is composed of.&lt;/p&gt;

&lt;p&gt;Granted Java&amp;rsquo;s &lt;code&gt;AffineTransform&lt;/code&gt; class is named this way for a reason, that
reason being you can only deal with &lt;strong&gt;affine transformations&lt;/strong&gt;. Whereas
Android&amp;rsquo;s &lt;code&gt;Matrix&lt;/code&gt; class can be used to represent projections by playing with
the &lt;code&gt;MPERSP_0&lt;/code&gt;, &lt;code&gt;MPERSP_1&lt;/code&gt; and &lt;code&gt;MPERSP_2&lt;/code&gt; entries (hence their names and the
&lt;code&gt;isAffine()&lt;/code&gt; method).&lt;/p&gt;

&lt;h3 id=&#34;well-featured&#34;&gt;Well featured&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s do it again.&lt;/p&gt;

&lt;h5 id=&#34;1-can-we-translate-1&#34;&gt;1. Can we translate?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;preTranslate(dx, dy)&lt;/code&gt; and &lt;code&gt;postTranslate(dx, dy)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre/Post-concats the matrix with the specified translation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;2-can-we-shear-1&#34;&gt;2. Can we shear?&lt;/h5&gt;

&lt;p&gt;Yes, but only by constants not by angles, and it&amp;rsquo;s named &amp;ldquo;skew&amp;rdquo;.&lt;br /&gt;
We have &lt;code&gt;preSkew(kx, ky)&lt;/code&gt; and  &lt;code&gt;postSkew(kx, ky)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre/Post-concats the matrix with the specified skew.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We also have &lt;code&gt;preSkew(kx, ky, px, py)&lt;/code&gt; and &lt;code&gt;postSkew(kx, ky, px, py)&lt;/code&gt; in order
to skew not around the origin, by around a given anchor point. That&amp;rsquo;s nice.&lt;/p&gt;

&lt;h5 id=&#34;3-can-we-scale-1&#34;&gt;3. Can we scale?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;preScale(sx, sy)&lt;/code&gt; and &lt;code&gt;postScale(sx, sy)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre/Post-concats the matrix with the specified scale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;4-can-we-reflect-1&#34;&gt;4. Can we reflect?&lt;/h5&gt;

&lt;p&gt;Again, not directly, we can scale by negative values, or we can use
&lt;code&gt;setValues({-1, 0, 0, 0, -1, 0, 0, 0, 1})&lt;/code&gt; (for example) and then
&lt;code&gt;postConcat&lt;/code&gt;.&lt;/p&gt;

&lt;h5 id=&#34;5-can-we-rotate-1&#34;&gt;5. Can we rotate?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;preRotate(degrees)&lt;/code&gt; and &lt;code&gt;postRotate(degrees)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre/Post-concats the matrix with the specified rotation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;6-can-we-scale-on-an-anchor-point-1&#34;&gt;6. Can we scale on an anchor point?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;preScale(sx, sy, px, py)&lt;/code&gt; and &lt;code&gt;postScale(sx, sy, px, py)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre/Post-concats the matrix with the specified scale.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;7-can-we-rotate-around-an-anchor-point-1&#34;&gt;7. Can we rotate around an anchor point?&lt;/h5&gt;

&lt;p&gt;Yes! We have &lt;code&gt;preRotate(degrees, px, py)&lt;/code&gt; and &lt;code&gt;postRotate(degrees, px, py)&lt;/code&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre-Post-concats the matrix with the specified rotation.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h5 id=&#34;8-can-we-transform-points-1&#34;&gt;8. Can we transform points?&lt;/h5&gt;

&lt;p&gt;Also yes! We have several methods available in order to transform points and
shapes from their original position to their new coordinates after the
transformation has been applied.&lt;/p&gt;

&lt;h3 id=&#34;ambiguous&#34;&gt;Ambiguous&lt;/h3&gt;

&lt;p&gt;Yes, I like this word&amp;hellip;&lt;/p&gt;

&lt;p&gt;The API is undeniably well featured, provides &lt;code&gt;pre&lt;/code&gt; and &lt;code&gt;post&lt;/code&gt; methods for
the most common transformations, a &lt;code&gt;setValues&lt;/code&gt; method to create matrices of
any shape, and also &lt;code&gt;preConcat(Matrix other)&lt;/code&gt; and &lt;code&gt;postConcat(Matrix other)&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What do they do?&lt;/p&gt;

&lt;h5 id=&#34;preconcat&#34;&gt;preConcat&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Preconcats the matrix with the specified matrix. M&amp;rsquo; = M * other&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So, if I read correctly, this is equivalent to:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{this} = \mathbf{this} . \mathbf{Tx}
$$
&lt;/div&gt;

&lt;p&gt;Wait&amp;hellip; in Java&amp;rsquo;s &lt;code&gt;AffineTransform&lt;/code&gt;, this was the equivalent of the
&lt;code&gt;concatenate&lt;/code&gt; method&amp;hellip;&lt;/p&gt;

&lt;h5 id=&#34;postconcat&#34;&gt;postConcat&lt;/h5&gt;

&lt;blockquote&gt;
&lt;p&gt;Postconcats the matrix with the specified matrix. M&amp;rsquo; = other * M&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Again, if I read correctly, this is equivalent to:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{this} = \mathbf{Tx} . \mathbf{this}
$$
&lt;/div&gt;

&lt;p&gt;Wait&amp;hellip; in Java&amp;rsquo;s &lt;code&gt;AffineTransform&lt;/code&gt;, this was the equivalent of the
&lt;code&gt;preConcatenate&lt;/code&gt; method&amp;hellip;&lt;/p&gt;

&lt;h5 id=&#34;wtf-dude&#34;&gt;WTF dude?&lt;/h5&gt;

&lt;p&gt;Exactly. If you don&amp;rsquo;t read the doc, &lt;strong&gt;you&amp;rsquo;re screwed&lt;/strong&gt; ðŸ’©&lt;/p&gt;

&lt;p&gt;So who&amp;rsquo;s right?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve searched a few minutes on the Interwebs and here&amp;rsquo;s what I&amp;rsquo;ve found
&lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_multiplication&#34;&gt;from Wikipedia&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;pre-multiply (or left multiply) &lt;code&gt;$\mathbf{A}$&lt;/code&gt; by &lt;code&gt;$\mathbf{B}$&lt;/code&gt;&amp;rdquo; means
&lt;code&gt;$\mathbf{B}.\mathbf{A}$&lt;/code&gt;,
while &amp;ldquo;post-multiply (or right multiply) &lt;code&gt;$\mathbf{A}$&lt;/code&gt; by &lt;code&gt;$\mathbf{C}$&lt;/code&gt;&amp;ldquo;
means &lt;code&gt;$\mathbf{A}.\mathbf{C}$&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And because two sources are better than one, from
&lt;a href=&#34;http://web.cse.ohio-state.edu/~whmin/courses/cse5542-2013-spring/6-Transformation_II.pdf&#34;&gt;this &amp;ldquo;ohio-state&amp;rdquo; course&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Pre-multiplication is to multiply the new matrix &lt;code&gt;$\mathbf{B}$&lt;/code&gt; to the left
of the existing matrix &lt;code&gt;$\mathbf{A}$&lt;/code&gt; to get the result
&lt;code&gt;$\mathbf{C} = \mathbf{B}.\mathbf{A}$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Post-multiplication is to multiply the new matrix &lt;code&gt;$\mathbf{B}$&lt;/code&gt; to the right
of the existing matrix &lt;code&gt;$\mathbf{A}$&lt;/code&gt; to get the result
&lt;code&gt;$\mathbf{C} = \mathbf{A}.\mathbf{B}$&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So it seems like Sun/Oracle got it right, and Google got it backward. But it
doesn&amp;rsquo;t solve our problem: we have to be cautious when applying affine
transformations, because the order matters!&lt;/p&gt;

&lt;p&gt;And because of the way we want to apply our transformations, in Android we&amp;rsquo;re
going to make use of the &lt;code&gt;post&lt;/code&gt; methods. But the &lt;code&gt;pre&lt;/code&gt; methods are here also
and will simplify your like if you need this kind of operations.&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I want to address my warmest thank you to the following people, who helped me
during the review process of this article, by providing helpful feedbacks and
advices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Igor Laborie (&lt;a href=&#34;https://twitter.com/ilaborie&#34;&gt;@ilaborie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Hadrien Toma&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Source code for the Java 2D example: &lt;a href=&#34;https://github.com/arnaudbos/i-rant/tree/develop/static/code/matrices-for-developers/JavaAffineTransform&#34;&gt;on Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert moar! Alot moar!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Matrices for developers</title>
      <link>http://www.arnaudbos.com/matrices-for-developers/</link>
      <pubDate>Sat, 19 Nov 2016 15:08:29 +0100</pubDate>
      
      <guid>http://www.arnaudbos.com/matrices-for-developers/</guid>
      <description>

&lt;p&gt;A few weeks ago I was on an &lt;code&gt;android-user-group&lt;/code&gt; channel,
when someone posted a question about Android&amp;rsquo;s
&lt;a href=&#34;https://developer.android.com/reference/android/graphics/Matrix.html#postScale(float,%20float,%20float,%20float)&#34;&gt;Matrix.postScale(sx, sy, px, py)&lt;/a&gt; method and how it works
because it was &lt;em&gt;&amp;ldquo;hard to grasp&amp;rdquo;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Coincidence: a few months ago, at the beginning of 2016, I finished a freelance
project on an &lt;a href=&#34;https://play.google.com/store/apps/details?id=fr.climbingaway&#34;&gt;Android application&lt;/a&gt; where I had to implement
an exciting feature:&lt;/p&gt;

&lt;p&gt;The user, after buying and downloading a digital topography of a crag, had to
be able to view the crag which was composed of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a picture of the cliff,&lt;/li&gt;
&lt;li&gt;a SVG file containing an overlay of the climbing routes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The user had to have the ability to pan and zoom at will and have the routes
layer &amp;ldquo;&lt;em&gt;follow&lt;/em&gt;&amp;rdquo; the picture.&lt;/p&gt;

&lt;div class=&#34;gallery&#34; itemscope itemtype=&#34;http://schema.org/ImageGallery&#34;&gt;

  &lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-1.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1080x1920&#34;&gt;
      &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-1.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Climbing away - App screenshot 1&#34; width=&#34;80&#34; height=&#34;142&#34; /&gt;
  &lt;/a&gt;

  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Climbing away - App screenshot 1
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

  &lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-2.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1080x1920&#34;&gt;
      &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-2.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Climbing away - App screenshot 2&#34; width=&#34;80&#34; height=&#34;142&#34; /&gt;
  &lt;/a&gt;

  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Climbing away - App screenshot 2
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;

  &lt;figure itemscope itemtype=&#34;http://schema.org/ImageObject&#34;&gt;
  &lt;a href=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-3.png&#34; itemprop=&#34;contentUrl&#34; data-size=&#34;1080x1920&#34;&gt;
      &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/ca-screenshot-3.png&#34; itemprop=&#34;thumbnail&#34; alt=&#34;Climbing away - App screenshot 3&#34; width=&#34;80&#34; height=&#34;142&#34; /&gt;
  &lt;/a&gt;

  &lt;figcaption itemprop=&#34;caption description&#34;&gt;
    Climbing away - App screenshot 3
    &lt;span itemprop=&#34;copyrightHolder&#34;&gt;&lt;/span&gt;
  &lt;/figcaption&gt;
&lt;/figure&gt;


&lt;div class=&#34;title&#34;&gt;Android app screenshots&lt;/div&gt;
&lt;/div&gt;


&lt;h2 id=&#34;technical-challenge&#34;&gt;Technical challenge&lt;/h2&gt;

&lt;p&gt;In order to have the overlay of routes follow the user&amp;rsquo;s actions, I found I
had to get my hands dirty by overloading an Android &lt;code&gt;ImageView&lt;/code&gt;, draw onto the
&lt;code&gt;Canvas&lt;/code&gt; and deal with finger gestures.&lt;br /&gt;
As a good engineer: I searched on Stack Overflow ðŸ˜…&lt;br /&gt;
And I discovered I&amp;rsquo;d need the &lt;code&gt;android.graphics.Matrix&lt;/code&gt; class for 2D
transformations.&lt;/p&gt;

&lt;p&gt;The problem with this class, is that it might seem obvious what it does, but if
you have no mathematical background, it&amp;rsquo;s still quite mysterious.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;boolean postScale (float sx, float sy, float px, float py)&lt;/p&gt;

&lt;p&gt;Postconcats the matrix with the specified scale. M&amp;rsquo; = S(sx, sy, px, py) * M&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Yeah, cool, so it &lt;em&gt;scales&lt;/em&gt; something with some parameters and it does it with
some kind of multiplication. I don&amp;rsquo;t get it:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What does it do exactly? Scales a matrix? What&amp;rsquo;s that supposed to mean, I
want to scale the canvas&amp;hellip;&lt;/li&gt;
&lt;li&gt;What should I use, &lt;code&gt;preScale&lt;/code&gt; or &lt;code&gt;postScale&lt;/code&gt;? Do I try both while I get the
input parameters from my gesture detection code and enter an infite loop of
trial and error guesstimates? (No. Fucking. Way.)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So at this very moment of the development process I realized I needed to learn
basic math skills about &lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_(mathematics)&#34;&gt;matrices&lt;/a&gt; that I had forgotten many
years ago, after finishing my first two years of uni ðŸ˜±&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;WWW to the rescue!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;While searching around I&amp;rsquo;ve found a number of good resources and was able to
learn some math again, and it felt great. It also helped me solve my 2D
transformations problems by applying my understandings as code in Java and
Android.&lt;/p&gt;

&lt;p&gt;So, given the discussion I&amp;rsquo;ve had on the channel I&amp;rsquo;ve mentioned above, it
seems I was not the only one struggling with matrices, trying to make sense of
it and using these skills with Android&amp;rsquo;s Matrix class and methods,
so I thought I&amp;rsquo;d write an article.&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of contents&lt;/h2&gt;

&lt;div id=&#34;toc&#34; class=&#34;well col-md-12&#34;&gt;
  &lt;!-- toc --&gt;
&lt;/div&gt;

&lt;h2 id=&#34;what-is-a-matrix&#34;&gt;What is a matrix?&lt;/h2&gt;

&lt;p&gt;The first resource you might encounter when trying to understand 2D
transformations are articles about &lt;em&gt;&amp;ldquo;Transformation matrix&amp;rdquo;&lt;/em&gt; and
&lt;em&gt;&amp;ldquo;Affine transformations&amp;rdquo;&lt;/em&gt; on Wikipedia:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Transformation_matrix&#34;&gt;https://en.wikipedia.org/wiki/Transformation_matrix&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations&#34;&gt;https://en.wikipedia.org/wiki/Transformation_matrix#Affine_transformations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Affine_transformation&#34;&gt;https://en.wikipedia.org/wiki/Affine_transformation&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I don&amp;rsquo;t know you, but with this material, I almost got everything â€” wait&amp;hellip;&lt;/p&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    &lt;a href=&#34;https://en.wikipedia.org/wiki/Chewbacca_defense&#34;&gt;
        &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/chewbacca-defense.jpg&#34; alt=&#34;Chewbacca defense - It does not make sense&#34;
            width=&#34;80%&#34;
            /&gt;
    &lt;/a&gt;
    
&lt;/figure&gt;



&lt;p&gt;&lt;strong&gt;NOPE! I didn&amp;rsquo;t get anything at all.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Luckily, on &lt;strong&gt;&lt;em&gt;Khan Academy&lt;/em&gt;&lt;/strong&gt; you will find a very well taught
&lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices&#34;&gt;algebra course about matrices&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you have this kind of problem, I encourage you to take the time needed to
follow this course until you reach that &amp;ldquo;AHA&amp;rdquo; moment. It&amp;rsquo;s just a few hours of
investment (it&amp;rsquo;s free) and you won&amp;rsquo;t regret it.&lt;/p&gt;

&lt;p&gt;Why? Because &lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_(mathematics)&#34;&gt;matrices&lt;/a&gt; are good at representing data, and
operations on matrices can help you solve problems on this data. For instance,
remember having to solve systems of linear equations at school?&lt;br /&gt;
The most common ways (at least the two &lt;strong&gt;I&lt;/strong&gt;&amp;rsquo;ve studied) to solve a system
like that is with the &lt;a href=&#34;https://en.wikipedia.org/wiki/System_of_linear_equations#Elimination_of_variables&#34;&gt;elimination of variables&lt;/a&gt; method
or the &lt;a href=&#34;https://en.wikipedia.org/wiki/System_of_linear_equations#Row_reduction&#34;&gt;row reduction&lt;/a&gt; method. But you can also use
matrices for that, which leads to interesting algorithms.&lt;br /&gt;
Matrices are used heavily in every branch of science, and they can also be
used for linear transformation to describe the position of points in space,
and this is the use case we will study in this article.&lt;/p&gt;

&lt;h3 id=&#34;anatomy&#34;&gt;Anatomy&lt;/h3&gt;

&lt;p&gt;Simply put, a &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-intro-to-matrices/a/intro-to-matrices&#34;&gt;matrix is a &lt;em&gt;2D array&lt;/em&gt;&lt;/a&gt;. In fact, talking
about a &lt;code&gt;$m\text{Ã—}n$&lt;/code&gt; matrix relates to an array of length &lt;code&gt;$m$&lt;/code&gt; in which
each item is also an array but this time of length &lt;code&gt;$n$&lt;/code&gt;. Usually, &lt;code&gt;$m$&lt;/code&gt;
represents a rows&amp;rsquo; number and &lt;code&gt;$n$&lt;/code&gt; a columns&amp;rsquo; number. Each element in the
matrix is called an &lt;em&gt;entry&lt;/em&gt;.&lt;br /&gt;
A matrix is represented by a bold capital letter,
and each entry is represented by the same letter, but in lowercase and suffixed
with its row number and column number, in this order. For example:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{A} =
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\
a_{21} &amp; a_{22} &amp; \vdots &amp; a_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn}
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Now what can we do with it? We can define an algebra for instance: like
&lt;a href=&#34;https://www.khanacademy.org/bigbingo_redirect?continue=https%3A%2F%2Fwww.khanacademy.org%2Fmath%2Falgebra-home%2Falg-matrices%2Falg-adding-and-subtracting-matrices%2Fv%2Fmatrix-addition-and-subtraction-1&amp;amp;conversion_ids=condensed_tutorial_title_click&#34;&gt;addition, subtraction&lt;/a&gt; and
&lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-multiplying-matrices-by-matrices/a/multiplying-matrices&#34;&gt;multiplication&lt;/a&gt; operations, for fun and profit. ðŸ¤“&lt;/p&gt;

&lt;h3 id=&#34;addition-subtraction&#34;&gt;Addition/Subtraction&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.khanacademy.org/bigbingo_redirect?continue=https%3A%2F%2Fwww.khanacademy.org%2Fmath%2Falgebra-home%2Falg-matrices%2Falg-adding-and-subtracting-matrices%2Fv%2Fmatrix-addition-and-subtraction-1&amp;amp;conversion_ids=condensed_tutorial_title_click&#34;&gt;Addition and subtraction of matrices&lt;/a&gt; is done by adding
or subtracting the corresponding entries of the operand matrices:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{A} + \mathbf{B} =
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\
a_{21} &amp; a_{22} &amp; \vdots &amp; a_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn}
\end{bmatrix}
+
\begin{bmatrix}
b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1n}\\
b_{21} &amp; b_{22} &amp; \vdots &amp; b_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
b_{m1} &amp; b_{m2} &amp; \cdots &amp; b_{mn}
\end{bmatrix}
=
\begin{bmatrix}
a_{11}+b_{11} &amp; a_{12}+b_{12} &amp; \cdots &amp; a_{1n}+b_{1n}\\
a_{21}+b_{21} &amp; a_{22}+b_{22} &amp; \vdots &amp; a_{2n}+b_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1}+b_{m1} &amp; a_{m2}+b_{m2} &amp; \cdots &amp; a_{mn}+b_{mn}
\end{bmatrix}
$$
&lt;/div&gt;

&lt;div&gt;
$$
\mathbf{A} - \mathbf{B} =
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\
a_{21} &amp; a_{22} &amp; \vdots &amp; a_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn}
\end{bmatrix}
-
\begin{bmatrix}
b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1n}\\
b_{21} &amp; b_{22} &amp; \vdots &amp; b_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
b_{m1} &amp; b_{m2} &amp; \cdots &amp; b_{mn}
\end{bmatrix}
=
\begin{bmatrix}
a_{11}-b_{11} &amp; a_{12}-b_{12} &amp; \cdots &amp; a_{1n}-b_{1n}\\
a_{21}-b_{21} &amp; a_{22}-b_{22} &amp; \vdots &amp; a_{2n}-b_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1}-b_{m1} &amp; a_{m2}-b_{m2} &amp; \cdots &amp; a_{mn}-b_{mn}
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Corollary to this definition we can deduce that in order to be &lt;em&gt;&lt;code&gt;defined&lt;/code&gt;&lt;/em&gt;, a matrix
addition or subtraction must be performed against two matrices of same
dimensions &lt;code&gt;$m\text{Ã—}n$&lt;/code&gt;, otherwise the &lt;em&gt;&amp;ldquo;corresponding entries&amp;rdquo;&lt;/em&gt; bit would
have no sense:&lt;br /&gt;
Grab a pen and paper and try to add a &lt;code&gt;$3\text{Ã—}2$&lt;/code&gt; matrix to a &lt;code&gt;$2\text{Ã—}3$&lt;/code&gt;
matrix. What will you do with the last &lt;em&gt;row&lt;/em&gt; of the first matrix? Same question
with the last &lt;em&gt;column&lt;/em&gt; of the second matrix?&lt;br /&gt;
If you don&amp;rsquo;t know, then you&amp;rsquo;ve reach the same conclusion as the mathematicians
that defined matrices additions and subtractions, pretty much ðŸ˜‹&lt;/p&gt;

&lt;h4&gt;Examples&lt;/h4&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
&lt;div class=&#34;col-md-6&#34;&gt;
$$
\begin{align}
\text{Addition}\\
\mathbf{A} + \mathbf{B}
&amp;=
\begin{bmatrix}
4 &amp; -8 &amp; 7\\
0 &amp; 2 &amp; -1\\
15 &amp; 4 &amp; 9
\end{bmatrix}
+
\begin{bmatrix}
-5 &amp; 2 &amp; 3\\
4 &amp; -1 &amp; 6\\
0 &amp; 12 &amp; 3
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
4+\left(-5\right) &amp; \left(-8\right)+2 &amp; 7+3\\
0+4               &amp; 2+\left(-1\right) &amp; \left(-1\right)+6\\
15+0              &amp; 4+12              &amp; 9+3
\end{bmatrix}\\
\mathbf{A} + \mathbf{B}
&amp;=
\begin{bmatrix}
-1 &amp; -6 &amp; 10\\
4  &amp; 1  &amp; 5\\
15 &amp; 16 &amp; 12
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;
&lt;div class=&#34;col-md-6&#34;&gt;
$$
\begin{align}
\text{Subtraction}\\
\mathbf{A} - \mathbf{B}
&amp;=
\begin{bmatrix}
4  &amp; -8 &amp; 7\\
0  &amp; 2  &amp; -1\\
15 &amp; 4  &amp; 9
\end{bmatrix}
-
\begin{bmatrix}
-5 &amp; 2 &amp; 3\\
4 &amp; -1 &amp; 6\\
0 &amp; 12 &amp; 3
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
4-\left(-5\right) &amp; \left(-8\right)-2 &amp; 7-3\\
0-4               &amp; 2-\left(-1\right) &amp; \left(-1\right)-6\\
15-0              &amp; 4-12              &amp; 9-3
\end{bmatrix}\\
\mathbf{A} + \mathbf{B}
&amp;=
\begin{bmatrix}
9  &amp; -10 &amp; 4\\
-4 &amp; 3   &amp; -7\\
15 &amp; -8  &amp; 6
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;h3 id=&#34;matrix-multiplication&#34;&gt;Matrix multiplication&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Remove this:&lt;/p&gt;

&lt;code class=&#34;language-klipse&#34;
  data-external-libs=&#34;https://raw.githubusercontent.com/thi-ng/typedarrays/master/src,https://raw.githubusercontent.com/thinktopic/aljabr/master/src,https://raw.githubusercontent.com/mikera/core.matrix/develop/src/main/clojure&#34;
  data-preamble=&#34;(ns toto.matrices-algebra (:require [clojure.core.matrix :refer [shape]]))&#34;&gt;
(shape 8.0)
&lt;/code&gt;
&lt;br&gt;


&lt;p&gt;Throughout all my math schooling I&amp;rsquo;ve been said things like
&lt;em&gt;&amp;ldquo;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apples_and_oranges&#34;&gt;you can&amp;rsquo;t add apples to oranges&lt;/a&gt;, it makes no
sense&amp;rdquo;&lt;/em&gt;, in order to express the importance of units.&lt;br /&gt;
Well it turns out that multiplying apples and oranges &lt;em&gt;is&lt;/em&gt; allowed.&lt;br /&gt;
And it can be applied to matrices: we can only add matrices to matrices, but
we can multiply matrices by numbers and by other matrices.&lt;/p&gt;

&lt;p&gt;In the first case though, the number is not just a number (semantically).
You don&amp;rsquo;t multiply a matrix by a number, you multiply a matrix by a
&lt;a href=&#34;https://en.wikipedia.org/wiki/Scalar_(mathematics)&#34;&gt;&lt;strong&gt;scalar&lt;/strong&gt;&lt;/a&gt;. In order to
&lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-multiplying-matrices-by-scalars/v/scalar-multiplication&#34;&gt;multiply a matrix by a scalar&lt;/a&gt;, we have to multiply each
entry in the matrix by the scalar, which will give us another matrix as a
result.&lt;/p&gt;

&lt;div&gt;
$$
k . \mathbf{A}
=
k .
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\
a_{21} &amp; a_{22} &amp; \vdots &amp; a_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn}
\end{bmatrix}
=
\begin{bmatrix}
k.a_{11} &amp; k.a_{12} &amp; \cdots &amp; k.a_{1n}\\
k.a_{21} &amp; k.a_{22} &amp; \vdots &amp; k.a_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
k.a_{m1} &amp; k.a_{m2} &amp; \cdots &amp; k.a_{mn}
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;And a little example:&lt;/p&gt;

&lt;div&gt;
$$
4 .
\begin{bmatrix}
0  &amp; 3  &amp; 12\\
7  &amp; -5 &amp; 1\\
-8 &amp; 2  &amp; 0
\end{bmatrix}
=
\begin{bmatrix}
0   &amp; 12  &amp; 48\\
28  &amp; -20 &amp; 4\\
-32 &amp; 8   &amp; 0
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;The second type of multiplication operation is the
&lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-multiplying-matrices-by-matrices/a/multiplying-matrices&#34;&gt;multiplication of matrices by matrices&lt;/a&gt;. This operation
is a little bit more complicated than addition/subtraction because in order
to multiply a matrix by a matrix we don&amp;rsquo;t simply multiply the corresponding
entries. I&amp;rsquo;ll just &lt;a href=&#34;https://en.wikipedia.org/wiki/Matrix_multiplication&#34;&gt;quote wikipedia&lt;/a&gt; on that one:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if &lt;code&gt;$\mathbf{A}$&lt;/code&gt; is an &lt;code&gt;$m\text{Ã—}n$&lt;/code&gt; matrix and &lt;code&gt;$\mathbf{B}$&lt;/code&gt; is an
&lt;code&gt;$n\text{Ã—}p$&lt;/code&gt; matrix, their matrix product &lt;code&gt;$\mathbf{AB}$&lt;/code&gt; is an
&lt;code&gt;$m\text{Ã—}p$&lt;/code&gt; matrix, in which the &lt;code&gt;$n$&lt;/code&gt; entries across a
row of &lt;code&gt;$\mathbf{A}$&lt;/code&gt; are multiplied with the &lt;code&gt;$n$&lt;/code&gt; entries down a columns
of &lt;code&gt;$\mathbf{B}$&lt;/code&gt; and summed to produce an entry of &lt;code&gt;$\mathbf{AB}$&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This hurts my brain, let&amp;rsquo;s break it down.&lt;/p&gt;

&lt;p&gt;The dimensions stuff first:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;if &lt;code&gt;$\mathbf{A}$&lt;/code&gt; is an &lt;code&gt;$m\text{Ã—}n$&lt;/code&gt; matrix and &lt;code&gt;$\mathbf{B}$&lt;/code&gt; is an
&lt;code&gt;$n\text{Ã—}p$&lt;/code&gt; matrix, their matrix product &lt;code&gt;$\mathbf{AB}$&lt;/code&gt; is an
&lt;code&gt;$m\text{Ã—}p$&lt;/code&gt; matrix&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can write this in a more graphical way: &lt;code&gt;$
\underset{m\text{Ã—}n}{\mathbf{A}}
\text{Ã—}
\underset{n\text{Ã—}p}{\mathbf{B}} =
\underset{m\text{Ã—}p}{\mathbf{AB}}
$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;See this simple matrix
&lt;code&gt;$\underset{2\text{Ã—}2}{\mathbf{A}} = \begin{bmatrix}a_{11} &amp;amp; a_{12}\\a_{21} &amp;amp; a_{22}\end{bmatrix}$&lt;/code&gt;
and this other matrix
&lt;code&gt;$\underset{2\text{Ã—}2}{\mathbf{B}} = \begin{bmatrix}b_{11} &amp;amp; b_{12}\\b_{21} &amp;amp; b_{22}\end{bmatrix}$&lt;/code&gt;.&lt;br /&gt;
We have &lt;code&gt;$m=2$&lt;/code&gt;, &lt;code&gt;$n=2$&lt;/code&gt; and &lt;code&gt;$p=2$&lt;/code&gt; so the multiplication will give
&lt;code&gt;$\underset{2\text{Ã—}2}{\mathbf{AB}} = \begin{bmatrix}ab_{11} &amp;amp; ab_{12}\\ab_{21} &amp;amp; ab_{22}\end{bmatrix}$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s decompose the second part now:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;the &lt;code&gt;$n$&lt;/code&gt; entries across a row of &lt;code&gt;$\mathbf{A}$&lt;/code&gt;&amp;ldquo;&lt;/em&gt; means is that each row
in &lt;code&gt;$\mathbf{A}$&lt;/code&gt; is an array of &lt;code&gt;$n=2$&lt;/code&gt; entries: if we take the first row we
get &lt;code&gt;$a_{11}$&lt;/code&gt; and &lt;code&gt;$a_{12}$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;the &lt;code&gt;$n$&lt;/code&gt; entries down a columns of &lt;code&gt;$\mathbf{B}$&lt;/code&gt;&amp;ldquo;&lt;/em&gt; means that each
column of &lt;code&gt;$\mathbf{B}$&lt;/code&gt; is also an array of &lt;code&gt;$n=2$&lt;/code&gt; entries: in the first
column we get &lt;code&gt;$b_{11}$&lt;/code&gt; and &lt;code&gt;$b_{21}$&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;are multiplied with&amp;rdquo;&lt;/em&gt; means that each entry in &lt;code&gt;$\mathbf{A}$&lt;/code&gt;&amp;rsquo;s row
must be multiplied with its corresponding (first with first, second with
second, etc.) entry in &lt;code&gt;$\mathbf{B}$&lt;/code&gt;&amp;rsquo;s column: &lt;code&gt;$a_{11}\text{Ã—}b_{11}$&lt;/code&gt; and
&lt;code&gt;$a_{12}\text{Ã—}b_{21}$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;em&gt;&amp;ldquo;And summed to produce an entry of &lt;code&gt;$\mathbf{AB}$&lt;/code&gt;&amp;ldquo;&lt;/em&gt; means that we must add
the products of these corresponding rows and columns entries in order to get
the entry of the new matrix at this row number and column number: in our case
we took the products of the entries in the first row in the first matrix with
the entries in the first column in the second matrix, so this will give us the
entry in the first row and first column of the new matrix:
&lt;code&gt;$a_{11}\text{Ã—}b_{11} + a_{12}\text{Ã—}b_{21}$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To plagiate wikipedia, here is the formula:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{A} =
\begin{bmatrix}
a_{11} &amp; a_{12} &amp; \cdots &amp; a_{1n}\\
a_{21} &amp; a_{22} &amp; \vdots &amp; a_{2n}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
a_{m1} &amp; a_{m2} &amp; \cdots &amp; a_{mn}
\end{bmatrix}
\text{, }
\mathbf{B} =
\begin{bmatrix}
b_{11} &amp; b_{12} &amp; \cdots &amp; b_{1p}\\
b_{21} &amp; b_{22} &amp; \vdots &amp; b_{2p}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
b_{n1} &amp; b_{n2} &amp; \cdots &amp; b_{np}
\end{bmatrix}\\
\mathbf{AB} =
\begin{bmatrix}
ab_{11} &amp; ab_{12} &amp; \cdots &amp; ab_{1p}\\
ab_{21} &amp; ab_{22} &amp; \vdots &amp; ab_{2p}\\
\vdots &amp; \vdots &amp; \ddots &amp; \vdots\\
ab_{m1} &amp; ab_{m2} &amp; \cdots &amp; ab_{mp}
\end{bmatrix}\\
\text{where }
ab_{ij}=\sum_{k=1}^{m}a_{ik}b_{kj}
$$
&lt;/div&gt;

&lt;p&gt;Ok I realize I don&amp;rsquo;t have any better way to explain this so here is a visual
representation of the matrix multiplication process and an example:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
&lt;div class=&#34;col-md-4&#34;&gt;
&lt;a title=&#34;By File:Matrix multiplication diagram.svg:User:Bilou See below. [GFDL (http://www.gnu.org/copyleft/fdl.html) or CC-BY-SA-3.0 (http://creativecommons.org/licenses/by-sa/3.0/)], via Wikimedia Commons&#34; href=&#34;https://commons.wikimedia.org/wiki/File%3AMatrix_multiplication_diagram_2.svg&#34; style=&#34;text-align: center;&#34;&gt;&lt;img width=&#34;256&#34; alt=&#34;Matrix multiplication diagram 2&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/e/eb/Matrix_multiplication_diagram_2.svg/256px-Matrix_multiplication_diagram_2.svg.png&#34;/&gt;&lt;/a&gt;
&lt;/div&gt;
&lt;div class=&#34;col-md-8&#34;&gt;
$$
\mathbf{A} =
\begin{bmatrix}
4  &amp; 3\\
0  &amp; -5\\
2  &amp; 1\\
-6 &amp; 8
\end{bmatrix}
\text{, }
\mathbf{B} =
\begin{bmatrix}
7  &amp; 1 &amp; 3\\
-2 &amp; 4 &amp; 1
\end{bmatrix}\\
\begin{align}
\mathbf{AB}
&amp;=
\begin{bmatrix}
4\text{Ã—}7+3\text{Ã—}\left(-2\right)               &amp; 4\text{Ã—}1+3\text{Ã—}4               &amp; 4\text{Ã—}3+3\text{Ã—}1\\
0\text{Ã—}7+\left(-5\right)\text{Ã—}\left(-2\right) &amp; 0\text{Ã—}1+\left(-5\right)\text{Ã—}4 &amp; 0\text{Ã—}3+\left(-5\right)\text{Ã—}1\\
2\text{Ã—}7+1\text{Ã—}\left(-2\right)               &amp; 2\text{Ã—}1+1\text{Ã—}4               &amp; 2\text{Ã—}3+1\text{Ã—}1\\
\left(-6\right)\text{Ã—}7+8\text{Ã—}\left(-2\right) &amp; \left(-6\right)\text{Ã—}1+8\text{Ã—}4 &amp; \left(-6\right)\text{Ã—}3+8\text{Ã—}1
\end{bmatrix}\\
\mathbf{AB}
&amp;=
\begin{bmatrix}
28-6   &amp; 4+12  &amp; 12+3\\
0+10   &amp; 0-20  &amp; 0-5\\
14-2   &amp; 2+4   &amp; 6+1\\
-42-16 &amp; -6+32 &amp; -18+8
\end{bmatrix}\\
\mathbf{AB}
&amp;=
\begin{bmatrix}
22  &amp; 16  &amp; 15\\
10  &amp; -20 &amp; -5\\
12  &amp; 6   &amp; 7\\
-58 &amp; 26  &amp; -10
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Remember:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In order for matrix multiplication to be defined, the number of columns in
the first matrix must be equal to the number of rows in the second matrix.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Otherwise you &lt;strong&gt;can&amp;rsquo;t&lt;/strong&gt; multiply, period.&lt;/p&gt;

&lt;p&gt;More details &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-properties-of-matrix-multiplication/v/defined-and-undefined-matrix-operations&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-properties-of-matrix-multiplication/a/matrix-multiplication-dimensions&#34;&gt;here&lt;/a&gt; if you
are interested.&lt;/p&gt;

&lt;h2 id=&#34;transformation-matrices&#34;&gt;Transformation matrices&lt;/h2&gt;

&lt;p&gt;Now that we know what is a matrix and how we can multiply matrices, we can see
why it is interesting for &lt;strong&gt;2D transformations&lt;/strong&gt;.&lt;/p&gt;

&lt;h3 id=&#34;transforming-points&#34;&gt;Transforming points&lt;/h3&gt;

&lt;p&gt;As I&amp;rsquo;ve said previously, matrices can be used to represent systems of
linear equations. Suppose I give you this system:&lt;/p&gt;

&lt;div&gt;
$$
2x+y=5\\
-x+2y=0
$$
&lt;/div&gt;

&lt;p&gt;Now that you are familiar with matrix multiplications, maybe you can see this
coming, but we can definitely express this system of equations as the following
matrix multiplication:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix}
2  &amp; 1\\
-1 &amp; 2
\end{bmatrix}
.
\begin{bmatrix}
x\\y
\end{bmatrix}
=
\begin{bmatrix}
5\\0
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;If we go a little farther, we can see something else based on the matrices
&lt;code&gt;$\begin{bmatrix}x\\y\end{bmatrix}$&lt;/code&gt; and
&lt;code&gt;$\begin{bmatrix}5\\0\end{bmatrix}$&lt;/code&gt;.&lt;br /&gt;
We can see that they can be used to reprensent &lt;strong&gt;&lt;em&gt;points&lt;/em&gt;&lt;/strong&gt; in the Cartesian
plane, right? A point can be represented by a vector originating from origin,
and a vector is just a &lt;code&gt;$2\text{Ã—}1$&lt;/code&gt; matrix.&lt;/p&gt;

&lt;p&gt;What we have here, is a matrix multiplication that represents the
transformation of a point into another point. We don&amp;rsquo;t know what the first
point&amp;rsquo;s coordinates are yet, and it doesn&amp;rsquo;t matter. What I wanted to show is
that, given a position vector, we are able to &lt;em&gt;transform&lt;/em&gt; it into another via
a matrix multiplication operation.&lt;/p&gt;

&lt;p&gt;Given a point &lt;code&gt;$P$&lt;/code&gt;, whose coordinates are represented by the position vector,
&lt;code&gt;$\begin{bmatrix}x\\y\end{bmatrix}$&lt;/code&gt;, we can obtain a new point &lt;code&gt;$P&#39;$&lt;/code&gt; whose
coordinates are represented by the position vector
&lt;code&gt;$\begin{bmatrix}x&#39;\\y&#39;\end{bmatrix}$&lt;/code&gt; by multiplying it by a matrix.&lt;/p&gt;

&lt;p&gt;One important thing is that this
&lt;em&gt;&lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-matrices-as-transformations/v/transforming-position-vector&#34;&gt;transformation matrix&lt;/a&gt;&lt;/em&gt; has to have specific
dimensions, in order to fulfill the rule of matrix multiplication: because
&lt;code&gt;$\begin{bmatrix}x\\y\end{bmatrix}$&lt;/code&gt; is a &lt;code&gt;$2\text{Ã—}1$&lt;/code&gt; matrix, and
&lt;code&gt;$\begin{bmatrix}x&#39;\\y&#39;\end{bmatrix}$&lt;/code&gt; is also a &lt;code&gt;$2\text{Ã—}1$&lt;/code&gt; matrix, then the
transformation matrix has to be a &lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; matrix in order to have:&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{A}
.
\begin{bmatrix}
x\\y
\end{bmatrix}
=
\begin{bmatrix}
a_{11} &amp; a_{12}\\
a_{21} &amp; a_{22}
\end{bmatrix}
.
\begin{bmatrix}
x\\y
\end{bmatrix}
=
\begin{bmatrix}
x&#39;\\y&#39;
\end{bmatrix}
$$
&lt;/div&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The order here is important as we will see later, but you can
already see that switching &lt;code&gt;$\mathbf{A}$&lt;/code&gt; and
&lt;code&gt;$\begin{bmatrix}x\\y\end{bmatrix}$&lt;/code&gt; would lead to an &lt;code&gt;$undefined$&lt;/code&gt; result
(if you don&amp;rsquo;t get it, re-read the part on matrix multiplication and their
dimensions).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Notice that the nature of the transformation represented by our matrix above
and in the link is not clear, and I didn&amp;rsquo;t say what kind of transformation it
is, on purpose. The transformation matrix was picked at random, and yet we
see how interesting and useful it is for 2D manipulation of graphics.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Another great thing about transformation matrices, is that they can be used
to &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-matrices-as-transformations/v/matrix-transformation-triangle&#34;&gt;transform a whole bunch of points&lt;/a&gt; at the same time.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For now, I suppose all you know is the type of transformations you want to
apply: &lt;code&gt;rotation&lt;/code&gt;, &lt;code&gt;scale&lt;/code&gt; or &lt;code&gt;translation&lt;/code&gt; and some parameters.&lt;/p&gt;

&lt;p&gt;So how do you go from &lt;code&gt;scale by a factor of 2&lt;/code&gt; and &lt;code&gt;rotate 90 degrees clockwise&lt;/code&gt;
to a transformation matrix?&lt;/p&gt;

&lt;p&gt;Well the answer is:&lt;/p&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/matrices-for-developers/moar-math-stuff.jpg&#34; alt=&#34;Moar math stuff with smiling cat meme&#34;
            width=&#34;60%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;h3 id=&#34;more-math-stuff&#34;&gt;More math stuff&lt;/h3&gt;

&lt;p&gt;More specifically I encourage you to read &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-matrices-as-transformations/a/matrices-as-transformations&#34;&gt;this course on &lt;em&gt;Matrices as
transformations&lt;/em&gt; (which is full of fancy plots and
animations)&lt;/a&gt; and particularly its last part:
&lt;strong&gt;&lt;em&gt;Representing two dimensional linear transforms with matrices&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Come back here once you&amp;rsquo;ve read it, or it&amp;rsquo;s gonna hurt ðŸ˜…&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Ok I suppose you&amp;rsquo;ve read the course I linked to above, but just in case, here
is a reminder&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;a position vector &lt;code&gt;$ \begin{bmatrix} x\\ y \end{bmatrix} $&lt;/code&gt; can be broken
down as
&lt;code&gt;$
\begin{bmatrix} x\\y \end{bmatrix} =
x \begin{bmatrix} \color{Green} 1\\ \color{Green} 0 \end{bmatrix}
+
y \begin{bmatrix} \color{Red} 0\\ \color{Red} 1 \end{bmatrix}
$&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;a class=&#34;fold title&#34; onclick=&#34;$(&#39;#transform-matrix-reminder-1&#39;).toggleClass(&#39;hidden&#39;);&#34;&gt;[Show explanation]&lt;/a&gt;
&lt;div id=&#34;transform-matrix-reminder-1&#34; class=&#34;fold content hidden&#34;&gt;
  &lt;p&gt;If you decompose &lt;code&gt;$\begin{bmatrix}x\\y\end{bmatrix}$&lt;/code&gt; into a matrix addition
operation, you find
&lt;code&gt;$
\begin{bmatrix}x\\y\end{bmatrix} =
\begin{bmatrix}x\\0\end{bmatrix} + \begin{bmatrix}0\\y\end{bmatrix}$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And if you decompose a little bit more you can express each operand of
this addition as the multiplication of a scalar and a matrix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$\begin{bmatrix}x\\0\end{bmatrix} = x . \begin{bmatrix}1\\0\end{bmatrix}$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$\begin{bmatrix}0\\y\end{bmatrix} = y . \begin{bmatrix}0\\1\end{bmatrix}$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now look at the the matrices &lt;code&gt;$\begin{bmatrix}1\\0\end{bmatrix}$&lt;/code&gt; and
&lt;code&gt;$\begin{bmatrix}0\\1\end{bmatrix}$&lt;/code&gt;, they are the Cartesian unit vectors.&lt;/p&gt;

&lt;p&gt;So
&lt;code&gt;$
\begin{bmatrix} x\\y \end{bmatrix} =
x \begin{bmatrix} \color{Green} 1\\ \color{Green} 0 \end{bmatrix}
+
y \begin{bmatrix} \color{Red} 0\\ \color{Red} 1 \end{bmatrix} $&lt;/code&gt; is just another
way to write that the position vector &lt;code&gt;$\begin{bmatrix} x\\ y \end{bmatrix}$&lt;/code&gt;
represents a point given by a transformation of the &lt;em&gt;unit vectors&lt;/em&gt; of our
Cartesian plane.&lt;/p&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$ \begin{bmatrix} \color{Green} a\\ \color{Green} c \end{bmatrix} $&lt;/code&gt; and
&lt;code&gt;$ \begin{bmatrix} \color{Red} b\\ \color{Red} d \end{bmatrix} $&lt;/code&gt; are the
position vectors where
&lt;code&gt;$ \begin{bmatrix} \color{Green} 0\\ \color{Green} 1 \end{bmatrix} $&lt;/code&gt; and
&lt;code&gt;$ \begin{bmatrix} \color{Red} 1\\ \color{Red} 0 \end{bmatrix} $&lt;/code&gt; will land
respectively after the transformation matrix
&lt;code&gt;$
\mathbf{A} =
\begin{bmatrix}
\color{Green} a &amp;amp; \color{Red} b\\
\color{Green} c &amp;amp; \color{Red} d
\end{bmatrix}
$&lt;/code&gt; has been applied.&lt;/li&gt;
&lt;/ul&gt;

&lt;a class=&#34;fold title&#34; onclick=&#34;$(&#39;#transform-matrix-reminder-2&#39;).toggleClass(&#39;hidden&#39;);&#34;&gt;[Show explanation]&lt;/a&gt;
&lt;div id=&#34;transform-matrix-reminder-2&#34; class=&#34;fold content hidden&#34;&gt;
  &lt;p&gt;Let&amp;rsquo;s start again from our unit vectors
&lt;code&gt;$ \begin{bmatrix} \color{Green} 1\\ \color{Green} 0 \end{bmatrix} $&lt;/code&gt;
and
&lt;code&gt;$ \begin{bmatrix} \color{Red} 0\\ \color{Red} 1 \end{bmatrix} $&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We know that
&lt;code&gt;$
\begin{bmatrix} x\\y \end{bmatrix} =
x \begin{bmatrix} \color{Green} 1\\ \color{Green} 0 \end{bmatrix}
+
y \begin{bmatrix} \color{Red} 0\\ \color{Red} 1 \end{bmatrix}
$&lt;/code&gt;, so now imagine we apply a transformation to our plane.&lt;/p&gt;

&lt;p&gt;Our unit vectors will be transformed too, right?&lt;/p&gt;

&lt;p&gt;If we assume that
&lt;code&gt;$ \begin{bmatrix} \color{Green} 1\\ \color{Green} 0 \end{bmatrix} $&lt;/code&gt;
&lt;em&gt;&amp;ldquo;lands on&amp;rdquo;&lt;/em&gt;
&lt;code&gt;$ \begin{bmatrix} \color{Green} a\\ \color{Green} c \end{bmatrix} $&lt;/code&gt;
and that
&lt;code&gt;$ \begin{bmatrix} \color{Red} 0\\ \color{Red} 1 \end{bmatrix} $&lt;/code&gt;
&lt;em&gt;&amp;ldquo;lands on&amp;rdquo;&lt;/em&gt;
&lt;code&gt;$ \begin{bmatrix} \color{Red} b\\ \color{Red} d \end{bmatrix} $&lt;/code&gt;,&lt;br /&gt;
then we have our position vector &lt;code&gt;$ \begin{bmatrix} x\\y \end{bmatrix} $&lt;/code&gt;
landing on
&lt;code&gt;$
x \begin{bmatrix} \color{Green} a\\ \color{Green} c \end{bmatrix}
+ y \begin{bmatrix} \color{Red} b\\ \color{Red} d \end{bmatrix}
 =
\begin{bmatrix}
\color{Green} a x + \color{Red} b y\\
\color{Green} c x + \color{Red} d y
\end{bmatrix}
$&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;given the previous transformation,
&lt;code&gt;$ \begin{bmatrix} x\\ y \end{bmatrix} $&lt;/code&gt; will land on
&lt;code&gt;$
\begin{bmatrix}
\color{Green} a x + \color{Red} b y\\
\color{Green} c x + \color{Red} d y
\end{bmatrix}
$&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you don&amp;rsquo;t understand this conclusion, read again, read the course, take
your time.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Now remember, our goal is to determine what &lt;code&gt;$ \mathbf{A} $&lt;/code&gt; is, because we
know the transformation we want to apply but we&amp;rsquo;re searching for the matrix we
should apply to our position vector(s) in order to transform our graphics.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take the example of the transformation of a series of points: we know
where the position vectors will land, but we&amp;rsquo;re looking for &lt;code&gt;$ \mathbf{A} $&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert 2D plane with &lt;code&gt;$P_{(2,1)}$&lt;/code&gt;, &lt;code&gt;$Q_{(-2,0)}$&lt;/code&gt;, &lt;code&gt;$P&#39;_{(5, 0)}$&lt;/code&gt;
and &lt;code&gt;$Q&#39;_{(-4, 2)}$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We know that:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;$$ \begin{bmatrix} 2\\ 1 \end{bmatrix} \text{ lands on } \begin{bmatrix} 5\\ 0 \end{bmatrix} $$&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;$$ \begin{bmatrix} -2\\ 0 \end{bmatrix} \text{ lands on } \begin{bmatrix} -4\\ 2 \end{bmatrix} $$&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Which means:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;$$ \begin{bmatrix} x\\ y \end{bmatrix} = \begin{bmatrix} 2\\ 1 \end{bmatrix} \text{ lands on } \begin{bmatrix} a.x+b.y\\ c.x+d.y \end{bmatrix} = \begin{bmatrix} 5\\ 0 \end{bmatrix} $$&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;$$ \begin{bmatrix} x\\ y \end{bmatrix} = \begin{bmatrix} -2\\ 0 \end{bmatrix} \text{ lands on } \begin{bmatrix} a.x+b.y\\ c.x+d.y \end{bmatrix} = \begin{bmatrix} -4\\ 2 \end{bmatrix} $$&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;From which we can deduce:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;$$ \begin{bmatrix} 2.a+1.b\\ 2.c+1.d \end{bmatrix} = \begin{bmatrix} 5\\ 0 \end{bmatrix} $$&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;$$ \begin{bmatrix} -2.a+0.b\\ -2.c+0.d \end{bmatrix} = \begin{bmatrix} -4\\ 2 \end{bmatrix} $$&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The right side gives us &lt;code&gt;$ a=2 $&lt;/code&gt; and &lt;code&gt;$ c = -1 $&lt;/code&gt;, with which we can deduce
&lt;code&gt;$ b=1 $&lt;/code&gt; and &lt;code&gt;$ d=2 $&lt;/code&gt; from the left side.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;And this, is our transformation matrix&lt;/strong&gt;:&lt;/p&gt;

&lt;div&gt;$$ \mathbf{A} = \begin{bmatrix} \color{Green} 2 &amp; \color{Red} 1\\ \color{Green} -\color{Green} 1 &amp; \color{Red} 2 \end{bmatrix} $$&lt;/div&gt;

&lt;h3 id=&#34;the-identity-matrix&#34;&gt;The identity matrix&lt;/h3&gt;

&lt;p&gt;We don&amp;rsquo;t know how to define a transformation matrix yet, but we know its form.&lt;br /&gt;
So what do we do next? Remember the last section where we&amp;rsquo;ve seen that
a position vector &lt;code&gt;$ \begin{bmatrix} x\\  y \end{bmatrix} $&lt;/code&gt; can be
broken down as &lt;code&gt;$
\begin{bmatrix}
x\\
y
\end{bmatrix}
= x \begin{bmatrix}
\color{Green} 1\\
\color{Green} 0
\end{bmatrix}
+ y \begin{bmatrix}
\color{Red} 0\\
\color{Red} 1
\end{bmatrix} $&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s a pretty good starting point, we just laid out our &amp;ldquo;base&amp;rdquo; matrix:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix}
\color{Green} 1 &amp; \color{Red} 0\\
\color{Green} 0 &amp; \color{Red} 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;This matrix represents the base state of your plane, the matrix applied
to your plane when you have just loaded your image for example (granted
your image is the same size as its receiving container view).&lt;br /&gt;
In other words, &lt;strong&gt;&lt;em&gt;this is the matrix that, applied to a position vector will
return that same position vector&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;This matrix is called the &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-properties-of-matrix-multiplication/a/intro-to-identity-matrices&#34;&gt;identity matrix&lt;/a&gt;.&lt;/p&gt;

&lt;a class=&#34;fold title&#34; onclick=&#34;$(&#39;#identity-matrix&#39;).toggleClass(&#39;hidden&#39;);&#34;&gt;[More on the identity matrix]&lt;/a&gt;
&lt;div id=&#34;identity-matrix&#34; class=&#34;fold content hidden&#34;&gt;
  &lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/3cnIa0fYJkY&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;/div&gt;


&lt;h3 id=&#34;combining-transformations&#34;&gt;Combining transformations&lt;/h3&gt;

&lt;p&gt;One more thing before we get concrete: &lt;em&gt;We want our user to be able
to combine/chain transformations&lt;/em&gt; (like zooming and panning at the same time
for instance).&lt;/p&gt;

&lt;p&gt;In order to chain multiple transformations we need to understand the
&lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-properties-of-matrix-multiplication/a/properties-of-matrix-multiplication&#34;&gt;properties of matrix multiplication&lt;/a&gt;, and more
specifically the &lt;code&gt;non-commutative&lt;/code&gt; and &lt;code&gt;associative&lt;/code&gt; properties of matrix
multiplication:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Matrix multiplication is associative
&lt;code&gt;$\left(\mathbf{A}.\mathbf{B}\right).\mathbf{C} = \mathbf{A}.\left(\mathbf{B}.\mathbf{C}\right)$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;a class=&#34;fold title&#34; onclick=&#34;$(&#39;#matrix-properties-1&#39;).toggleClass(&#39;hidden&#39;);&#34;&gt;[Show explanation]&lt;/a&gt;
&lt;div id=&#34;matrix-properties-1&#34; class=&#34;fold content hidden&#34;&gt;
  &lt;p&gt;Just trust me already!&lt;/p&gt;

&lt;p&gt;If you don&amp;rsquo;t, I&amp;rsquo;m not going to write it here because it takes a lot of screen
width (I&amp;rsquo;ve tried and it didn&amp;rsquo;t render very well), so check out this video.&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/8Ryfe82DTcM&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;

&lt;/div&gt;


&lt;ul&gt;
&lt;li&gt;Matrix multiplication is non-commutative
&lt;code&gt;$\mathbf{A}.\mathbf{B} \neq \mathbf{B}.\mathbf{A}$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;a class=&#34;fold title&#34; onclick=&#34;$(&#39;#matrix-properties-2&#39;).toggleClass(&#39;hidden&#39;);&#34;&gt;[Show explanation]&lt;/a&gt;
&lt;div id=&#34;matrix-properties-2&#34; class=&#34;fold content hidden&#34;&gt;
  &lt;p&gt;In order to affirm this we just have to prove commutativity wrong, which is
easy!&lt;/p&gt;

&lt;p&gt;Imagine &lt;code&gt;$\mathbf{A}$&lt;/code&gt; is a &lt;code&gt;$5\text{Ã—}2$&lt;/code&gt; matrix, and &lt;code&gt;$\mathbf{B}$&lt;/code&gt; is a
&lt;code&gt;$2\text{Ã—}3$&lt;/code&gt; matrix:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;$\underset{5\text{Ã—}2}{\mathbf{A}}.\underset{2\text{Ã—}3}{\mathbf{B}}=\underset{5\text{Ã—}3}{\mathbf{C}}$&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;$\underset{2\text{Ã—}3}{\mathbf{B}}.\underset{5\text{Ã—}2}{\mathbf{A}}=undefined$&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And that&amp;rsquo;s it. But we can also see commutativity does not hold even for
matrices of same dimensions:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
$$
\mathbf{A}.\mathbf{B}\\
=
\begin{bmatrix}
a_{11} &amp; a_{12}\\
a_{21} &amp; a_{22}
\end{bmatrix}
.
\begin{bmatrix}
b_{11} &amp; b_{12}\\
b_{21} &amp; b_{22}
\end{bmatrix}\\
=
\begin{bmatrix}
a_{11}.b_{11}+a_{12}.b_{21} &amp; a_{11}.b_{12}+a_{12}.b_{22}\\
a_{21}.b_{11}+a_{22}.b_{21} &amp; a_{11}.b_{22}+a_{22}.b_{22}
\end{bmatrix}
$$
  &lt;/div&gt;
  &lt;div class=&#34;col-md-6&#34;&gt;
$$
\mathbf{B}.\mathbf{A}\\
=
\begin{bmatrix}
b_{11} &amp; b_{12}\\
b_{21} &amp; b_{22}
\end{bmatrix}
.
\begin{bmatrix}
a_{11} &amp; a_{12}\\
a_{21} &amp; a_{22}
\end{bmatrix}\\
=
\begin{bmatrix}
b_{11}.a_{11}+b_{12}.a_{21} &amp; b_{11}.a_{12}+b_{12}.a_{22}\\
b_{21}.a_{11}+b_{22}.a_{21} &amp; b_{21}.a_{12}+b_{22}.a_{22}
\end{bmatrix}
$$
  &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Grab a pen and paper and try it for yourself with the following matrices
&lt;code&gt;$\mathbf{A}=\begin{bmatrix}1 &amp;amp; 2\\-3 &amp;amp; -4\end{bmatrix}$&lt;/code&gt; and
&lt;code&gt;$\mathbf{B}=\begin{bmatrix}-2 &amp;amp; 0\\0 &amp;amp; -3\end{bmatrix}$&lt;/code&gt;.&lt;/p&gt;

&lt;/div&gt;


&lt;p&gt;Back to our transformations.&lt;br /&gt;
Imagine we want to apply transformation &lt;code&gt;$ \mathbf{B} $&lt;/code&gt;, then transformation
&lt;code&gt;$ \mathbf{A} $&lt;/code&gt; to our position vector &lt;code&gt;$ \vec{v} $&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We have
&lt;code&gt;$
\vec{v&#39;} = \mathbf{B} . \vec{v}
$&lt;/code&gt;
and
&lt;code&gt;$
\vec{v&#39;&#39;} = \mathbf{A} . \vec{v&#39;}
$&lt;/code&gt;,
which leads us to:&lt;/p&gt;

&lt;div&gt;
$$
\vec{v&#39;&#39;} = \mathbf{A} . \left( \mathbf{B} . \vec{v} \right)
$$
&lt;/div&gt;

&lt;p&gt;We know that matrix multiplication is &lt;code&gt;associative&lt;/code&gt;, which gives us:&lt;/p&gt;

&lt;div&gt;
$$
\vec{v&#39;&#39;} = \mathbf{A} . \left( \mathbf{B} . \vec{v} \right)
\Leftrightarrow
\vec{v&#39;&#39;} = \left( \mathbf{A} . \mathbf{B} \right) . \vec{v}
$$
&lt;/div&gt;

&lt;p&gt;In conclusion, in order to apply multiple transformations at once, we can
multiply all our transformation matrices and apply the resulting transformation
matrix to our vector(s).&lt;/p&gt;

&lt;p&gt;We also know that matrix multiplication is &lt;code&gt;not commutative&lt;/code&gt;, so the order
in which we multiply our transformation matrices
(&lt;code&gt;$ \mathbf{A} . \mathbf{B} $&lt;/code&gt; or &lt;code&gt;$ \mathbf{B} . \mathbf{A} $&lt;/code&gt;) will have
an impact on our final matrix and will lead to different results, different
transformations.&lt;/p&gt;

&lt;h2 id=&#34;types-of-transformations&#34;&gt;Types of transformations&lt;/h2&gt;

&lt;p&gt;There are several types of 2D transformations we are able to define using
&lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; dimensions matrices, and you&amp;rsquo;ve had a preview of most of them
in this course on &lt;a href=&#34;https://www.khanacademy.org/math/algebra-home/alg-matrices/alg-matrices-as-transformations/a/matrices-as-transformations&#34;&gt;matrices as transformations&lt;/a&gt;.&lt;br /&gt;
Namely:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scaling&lt;/li&gt;
&lt;li&gt;Reflexion&lt;/li&gt;
&lt;li&gt;Shearing&lt;/li&gt;
&lt;li&gt;Rotation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;For the rest of this section imagine we have the point
&lt;code&gt;$ P_{\left(x, y\right)} $&lt;/code&gt;, which represents any point of
an object on the plane, and we want to find the matrix to transform it into
&lt;code&gt;$ P&#39;_{\left(x&#39;, y&#39;\right)}$&lt;/code&gt; such that&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39; \end{bmatrix} =
\mathbf{A} . \begin{bmatrix} x\\y \end{bmatrix} =
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
.
\begin{bmatrix} x\\y \end{bmatrix}
$$
&lt;/div&gt;

&lt;h3 id=&#34;scaling&#34;&gt;Scaling&lt;/h3&gt;

&lt;p&gt;Scaling (like zooming in by a factor of 2 for instance) might seem
straightforward to represent at the time of pinch-zoom/digital devices, right?
&lt;em&gt;&amp;ldquo;Simply multiply the coordinates by the scaling factor and you&amp;rsquo;re done.&amp;rdquo;&lt;/em&gt;&lt;br /&gt;
But the pitfall here is that you &lt;em&gt;might&lt;/em&gt; want to have different horizontal and
vertical scaling factors for your transformation, I mean it&amp;rsquo;s possible!&lt;/p&gt;

&lt;p&gt;So we must differentiate between &lt;code&gt;$ s_{x} $&lt;/code&gt; and &lt;code&gt;$ s_{y} $&lt;/code&gt; which represent
the horizontal and vertical scaling factors, respectively.&lt;/p&gt;

&lt;p&gt;The two equations this gives us are:&lt;/p&gt;

&lt;div&gt;
$$
x&#39; = s_{x} . x \\
y&#39; = s_{y} . y
$$
&lt;/div&gt;

&lt;p&gt;Knowing that:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39; \end{bmatrix} =
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
.
\begin{bmatrix} x&#39;\\y&#39; \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;We can find &lt;code&gt;$a$&lt;/code&gt;, &lt;code&gt;$b$&lt;/code&gt;, &lt;code&gt;$c$&lt;/code&gt; and &lt;code&gt;$d$&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
s_{x} . x = a . x + b . y\\
\Rightarrow
a = s_{x} \text{ and } b = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
s_{y} . y = c . x + d . y\\
\Rightarrow
c = s_{y} \text{ and } d = 0
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;In conclusion, the &lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; scaling matrix for the factors
&lt;code&gt;$ \left(s_{x}, s_{y}\right) $&lt;/code&gt; is&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
=
\begin{bmatrix} s_{x} &amp; 0\\0 &amp; s_{y} \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Which makes sense, right? I mean, scaling by a factor of &lt;code&gt;$1$&lt;/code&gt; both on the
&lt;code&gt;$x$&lt;/code&gt; and &lt;code&gt;$y$&lt;/code&gt; axises will give:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} s_{x} &amp; 0\\0 &amp; s_{y} \end{bmatrix}
=
\begin{bmatrix} 1 &amp; 0\\0 &amp; 1 \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Which is&amp;hellip; the &lt;code&gt;identity&lt;/code&gt; matrix! So nothing moves, basically.&lt;/p&gt;

&lt;h3 id=&#34;reflexion&#34;&gt;Reflexion&lt;/h3&gt;

&lt;p&gt;There are 2 types of reflexions we can think about right ahead: reflexion around
an axis, or around a point.&lt;br /&gt;
To keep things simple we&amp;rsquo;ll focus on reflexions around the &lt;code&gt;$x$&lt;/code&gt; and &lt;code&gt;$y$&lt;/code&gt;
axises (reflexion around the origin is the equivalent of applying a reflexion on
the &lt;code&gt;$x$&lt;/code&gt; and &lt;code&gt;$y$&lt;/code&gt; axises successively).&lt;/p&gt;

&lt;p&gt;Reflexion around the &lt;code&gt;$x$&lt;/code&gt; axis gives us:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
x&#39; = x\\
\Rightarrow
x = a . x + b . y\\
\Rightarrow
a = 1 \text{ and } b = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
y&#39; = -y\\
\Rightarrow
-y = c . x + d . y\\
\Rightarrow
c = 0 \text{ and } d = -1
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;Funny, reflecting around the &lt;code&gt;$x$&lt;/code&gt; axis is the same transformation as scaling
&lt;code&gt;$x$&lt;/code&gt; by a factor of &lt;code&gt;$-1$&lt;/code&gt; and &lt;code&gt;$y$&lt;/code&gt; by a factor of &lt;code&gt;$1$&lt;/code&gt;:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
=
\begin{bmatrix}
1 &amp; 0\\
0 &amp; -1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;And reflexion around the &lt;code&gt;$y$&lt;/code&gt; axis gives us:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
x&#39; = -x\\
\Rightarrow
-x = a . x + b . y\\
\Rightarrow
a = -1 \text{ and } b = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
y&#39; = y\\
\Rightarrow
y = c . x + d . y\\
\Rightarrow
c = 0 \text{ and } d = 1
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The transformation matrix to reflect around the &lt;code&gt;$y$&lt;/code&gt; axis is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
=
\begin{bmatrix}
-1 &amp; 0\\
0 &amp; 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;h3 id=&#34;shearing&#34;&gt;Shearing&lt;/h3&gt;

&lt;p&gt;Now it gets a little bit trickier.&lt;/p&gt;

&lt;p&gt;In most examples I&amp;rsquo;ve found, shearing is explained by saying the coordinates
are changed by adding a constant that measures the degree of shearing.&lt;br /&gt;
For instance, a shear along the &lt;code&gt;$x$&lt;/code&gt; axis is often represented showing a
rectangle with a vertex at &lt;code&gt;$\left(0, 1\right)$&lt;/code&gt; is transformed into a
parallelogram with a vertex at &lt;code&gt;$\left(1, 1\right)$&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt;: (insert image of a plane with a shearing of alpha)&lt;/p&gt;

&lt;p&gt;In this article, I want to explain it using the shearing angle, the angle
through which the axis is sheared. Let&amp;rsquo;s call it &lt;code&gt;$\alpha$&lt;/code&gt; (alpha).&lt;/p&gt;

&lt;p&gt;Remember your &lt;a href=&#34;http://www.mathsisfun.com/algebra/trigonometry.html&#34;&gt;trigonometry&lt;/a&gt; class?&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;In a right-angled triangle:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the hypotenuse is the longest side&lt;/li&gt;
&lt;li&gt;the the opposite side is the one at the opposite of a given angle&lt;/li&gt;
&lt;li&gt;the adjacent side is the next to a given angle&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;

&lt;p&gt;If we look at the plane above, we can see that the new abscissa &lt;code&gt;$x&#39;$&lt;/code&gt; is
equals to the addition of &lt;code&gt;$x$&lt;/code&gt; plus the opposite side of the triangle formed
by the &lt;code&gt;$y$&lt;/code&gt; axis, the sheared version of the &lt;code&gt;$y$&lt;/code&gt; axis and the segment
between the top left vertex of the rectangle and the top left vertex of the
parallelogram.&lt;/p&gt;

&lt;p&gt;From our trigonometry class, we know that:&lt;/p&gt;

&lt;div&gt;
$$
\cos \left( \alpha \right) = \frac{adjacent}{hypotenuse}\\
\sin \left( \alpha \right) = \frac{opposite}{hypotenuse}\\
\tan \left( \alpha \right) = \frac{opposite}{adjacent}
$$
&lt;/div&gt;

&lt;p&gt;We know &lt;code&gt;$\alpha$&lt;/code&gt;, but we don&amp;rsquo;t know the length of the hypotenuse, so we
can&amp;rsquo;t use the cosine function.&lt;br /&gt;
But we know the adjacent side&amp;rsquo;s length: it&amp;rsquo;s &lt;code&gt;$y$&lt;/code&gt;, so we can use the tangent
function to find the opposite side&amp;rsquo;s length.&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
x&#39; = x + y . \tan \left( -\alpha \right) \\
\Rightarrow
x + y . \tan \left( -\alpha \right) = a . x + b . y\\
\Rightarrow
a = 1 \text{ and } b = \tan \left( -\alpha \right)
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-6&#34;&gt;
$$
y&#39; = y\\
\Rightarrow
y = c . x + d . y\\
\Rightarrow
c = 0 \text{ and } d = 1
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The transformation matrix to shear along the &lt;code&gt;$x$&lt;/code&gt; direction is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
=
\begin{bmatrix}
1 &amp; \tan \left( -\alpha \right)\\
0 &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
1 &amp; k_{x}\\
0 &amp; 1
\end{bmatrix}\\
\text{where } k_{x} \text{ is the shearing constant}
$$
&lt;/div&gt;

&lt;p&gt;Similarly, the transformation matrix to shear along the &lt;code&gt;$y$&lt;/code&gt; direction is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
=
\begin{bmatrix}
1 &amp; 0\\
\tan \left( -\beta \right) &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
1 &amp; 0\\
k_{y} &amp; 1
\end{bmatrix}\\
\text{where } k_{y} \text{ is the shearing constant}
$$
&lt;/div&gt;

&lt;h3 id=&#34;rotation&#34;&gt;Rotation&lt;/h3&gt;

&lt;p&gt;Rotations are yet a little bit more complex.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a closer look at it with an example of rotating (around the origin)
from a angle &lt;code&gt;$ \theta $&lt;/code&gt; (theta).&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;By Nick Berry&#34; href=&#34;http://datagenetics.com/blog/august32013/&#34;&gt;&lt;img style=&#34;background-color: #333;&#34;
src=&#34;/img/matrices-for-developers/g22.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This image shows a point &lt;code&gt;$ P $&lt;/code&gt; before and after a rotation: &lt;code&gt;$ P $&lt;/code&gt;
in the starting and ending planes respectively.&lt;/p&gt;

&lt;p&gt;Notice how the coordinates of &lt;code&gt;$ P $&lt;/code&gt; in each plane are the same:
&lt;code&gt;$ P $&lt;/code&gt; has the same set of coordinates &lt;code&gt;$ \left( x, y\right) $&lt;/code&gt; in both
planes.&lt;br /&gt;
But now &lt;code&gt;$ P $&lt;/code&gt; has &lt;strong&gt;&lt;em&gt;new coordinates&lt;/em&gt;&lt;/strong&gt; &lt;code&gt;$ \left( x, y\right) $&lt;/code&gt; &lt;strong&gt;&lt;em&gt;in the
first plane&lt;/em&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s rename the coordinates of &lt;code&gt;$ P $&lt;/code&gt; in the second plane as
&lt;code&gt;$ \left( x&#39;, y&#39;\right) $&lt;/code&gt;.
At this point we know &lt;code&gt;$ x&#39; $&lt;/code&gt; and &lt;code&gt;$ y&#39; $&lt;/code&gt;, because they are the same as the
original &lt;code&gt;$ x $&lt;/code&gt; and &lt;code&gt;$ y $&lt;/code&gt;. But we don&amp;rsquo;t know the new &lt;code&gt;$ x $&lt;/code&gt; and &lt;code&gt;$ y $&lt;/code&gt;.&lt;br /&gt;
On the other hand, we can now define the &lt;strong&gt;&lt;em&gt;relationship&lt;/em&gt;&lt;/strong&gt; between the new
coordinates &lt;code&gt;$ \left(x, y\right) $&lt;/code&gt; and the coordinates in the rotated plane
&lt;code&gt;$ \left(x&#39;, y&#39;\right) $&lt;/code&gt;, right?&lt;/p&gt;

&lt;p&gt;This is where &lt;a href=&#34;http://www.mathsisfun.com/algebra/trigonometry.html&#34;&gt;trigonometry&lt;/a&gt; helps again, along with
&lt;a href=&#34;http://datagenetics.com/blog/august32013/&#34;&gt;this post&lt;/a&gt; and &lt;a href=&#34;https://www.youtube.com/watch?v=h11ljFJeaLo&#34;&gt;this video&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a title=&#34;By Nick Berry&#34; href=&#34;http://datagenetics.com/blog/august32013/&#34;&gt;&lt;img style=&#34;background-color: #333;&#34;
src=&#34;/img/matrices-for-developers/g32.png&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Here we see that &lt;code&gt;$ x&#39; $&lt;/code&gt; (the blue line) can be expressed as the addition of
the
&lt;span class=&#34;green-text&#34;&gt;adjacent side of the green triangle&lt;/span&gt;
plus
&lt;span class=&#34;red-text&#34;&gt;the opposite side of the red triangle.&lt;/span&gt;&lt;br /&gt;
And &lt;code&gt;$ y&#39; $&lt;/code&gt; as the subtraction of
&lt;span class=&#34;green-text&#34;&gt;the opposite side of the green triangle&lt;/span&gt;
from
&lt;span class=&#34;red-text&#34;&gt;the adjacent side of the red triangle&lt;/span&gt;.&lt;/p&gt;

&lt;div&gt;
$$
\cos \left( \theta \right) = \frac{adjacent}{hypotenuse} \Rightarrow adjacent = hypotenuse . \cos \left( \theta \right)\\
\sin \left( \theta \right) = \frac{opposite}{hypotenuse} \Rightarrow opposite = hypotenuse . \sin \left( \theta \right)
$$
&lt;/div&gt;

&lt;p&gt;So we can express our relationship as follows:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
&lt;div class=&#34;col-md-6&#34;&gt;
$$
\begin{align}
x&#39; &amp; = \color{Green}a\color{Green}d\color{Green}j\color{Green}a\color{Green}c\color{Green}e\color{Green}n\color{Green}t + \color{Red}o\color{Red}p\color{Red}p\color{Red}o\color{Red}s\color{Red}i\color{Red}t\color{Red}e\\
&amp; = \color{Green}h\color{Green}y\color{Green}p\color{Green}o\color{Green}t\color{Green}e\color{Green}n\color{Green}u\color{Green}s\color{Green}e . \cos \left( \theta \right) + \color{Red}h\color{Red}y\color{Red}p\color{Red}o\color{Red}t\color{Red}e\color{Red}n\color{Red}u\color{Red}s\color{Red}e . \sin \left( \theta \right)\\
&amp; = x . \cos \left( \theta \right) + y . \sin \left( \theta \right)
\end{align}
$$
&lt;/div&gt;
&lt;div class=&#34;col-md-6&#34;&gt;
$$
\begin{align}
y&#39; &amp; = \color{Red}a\color{Red}d\color{Red}j\color{Red}a\color{Red}c\color{Red}e\color{Red}n\color{Red}t - \color{Green}o\color{Green}p\color{Green}p\color{Green}o\color{Green}s\color{Green}i\color{Green}t\color{Green}e\\
&amp; = \color{Red}h\color{Red}y\color{Red}p\color{Red}o\color{Red}t\color{Red}e\color{Red}n\color{Red}u\color{Red}s\color{Red}e . \cos \left( \theta \right) - \color{Green}h\color{Green}y\color{Green}p\color{Green}o\color{Green}t\color{Green}e\color{Green}n\color{Green}u\color{Green}s\color{Green}e . \sin \left( \theta \right)\\
&amp; = y . \cos \left( \theta \right) - x . \sin \left( \theta \right)\\
&amp; = -x . \sin \left( \theta \right) + y . \cos \left( \theta \right)
\end{align}
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;In the end what we really have here is a system of equations that we can
represent as a &lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; matrix:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix}
x&#39;\\
y&#39;
\end{bmatrix}
=
\begin{bmatrix}
\cos \left( \theta \right) &amp; \sin \left( \theta \right)\\
-\sin \left( \theta \right) &amp; \cos \left( \theta \right)
\end{bmatrix}
.
\begin{bmatrix}
x\\
y
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;But this is not &lt;em&gt;exactly&lt;/em&gt; what we are looking for, right?&lt;br /&gt;
This defines the relationship to convert from the &lt;em&gt;new&lt;/em&gt; coordinates in the
original plane
&lt;code&gt;$ \left(x, y\right) $&lt;/code&gt;
what are the coordinates &lt;code&gt;$ \left(x&#39;, y&#39;\right) $&lt;/code&gt; in the rotated plane.&lt;br /&gt;
Whereas what we want to define is how to convert from the rotated plane
(the coordinates that we know) to the original plane.&lt;/p&gt;

&lt;p&gt;In order to do what we want, we need to take the same matrix, but define a
rotation of &lt;code&gt;$ - \theta $&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;We know that:&lt;/p&gt;

&lt;div&gt;
$$
\cos \left( -\theta \right) = cos \left( \theta \right)\\
\sin \left( -\theta \right) = - sin \left( \theta \right)
$$
&lt;/div&gt;

&lt;p&gt;Which gives us our desired rotation matrix:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b\\c &amp; d \end{bmatrix}
=
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right)\\
\sin \left( \theta \right) &amp; \cos \left( \theta \right)
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Congratulations! You know of to define scaling, reflexion, shearing and rotation
transformation matrices. So what is missing?&lt;/p&gt;

&lt;h2 id=&#34;3x3-transformation-matrices&#34;&gt;3x3 transformation matrices&lt;/h2&gt;

&lt;p&gt;If you&amp;rsquo;re still with me at this point, maybe you&amp;rsquo;re wondering why any of this
is useful. If it&amp;rsquo;s the case, you missed the point of this article, which is to
&lt;strong&gt;&lt;em&gt;understand&lt;/em&gt;&lt;/strong&gt; affine transformations in order to apply them in code.&lt;/p&gt;

&lt;p&gt;This is useful because at this point you know what a transformation matrix
looks like, and you know how to compute one given a few position vectors,
and it is also a great accomplishment by itself.&lt;/p&gt;

&lt;p&gt;But here&amp;rsquo;s the thing: &lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; matrices are limiting us in the number of operations
we can perform. With a &lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; matrix, the only transformations we can do are the
ones we&amp;rsquo;ve seen in the previous section:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Scaling&lt;/li&gt;
&lt;li&gt;Reflexion&lt;/li&gt;
&lt;li&gt;Shearing&lt;/li&gt;
&lt;li&gt;Rotation&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So what are we missing? Answer: translations!&lt;br /&gt;
And this is unfortunate, as translations are really useful, like when the user
pans and the image has to behave accordingly (aka. &lt;em&gt;follow the finger&lt;/em&gt;).&lt;br /&gt;
Translations are defined by the addition of two matrices :&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix}
x&#39;\\
y&#39;
\end{bmatrix}
=
\begin{bmatrix}
x\\
y
\end{bmatrix}
+
\begin{bmatrix}
t_{x}\\
t_{y}
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;But we want our user to be able to combine/chain transformations (like
zooming on a specific point which is not the origin), so we need to find a
way to express translations as matrices multiplications too.&lt;/p&gt;

&lt;p&gt;Here comes the world of &lt;a href=&#34;https://en.wikipedia.org/wiki/Homogeneous_coordinates&#34;&gt;Homogeneous coordinates&lt;/a&gt;&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;No, you don&amp;rsquo;t &lt;em&gt;have&lt;/em&gt; to read it&lt;/strong&gt;, and no I don&amp;rsquo;t totally get it either&amp;hellip;&lt;/p&gt;

&lt;p&gt;The gist of it is:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the Cartesian plane you&amp;rsquo;re used to, is really just one of many
planes that exist in the 3D space, and is at &lt;code&gt;$ z = 1 $&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;for any point &lt;code&gt;$ \left(x, y, z\right)$&lt;/code&gt; in the 3D space, the line in
the projecting space that is going through this point and the origin is
also passing through any point that is obtained by scaling
&lt;code&gt;$x$&lt;/code&gt;, &lt;code&gt;$y$&lt;/code&gt; and &lt;code&gt;$z$&lt;/code&gt; by the same factor&lt;/li&gt;
&lt;li&gt;the coordinates of any of these points on the line is
&lt;code&gt;$ \left(\frac{x}{z}, \frac{y}{z}, z\right)$&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert projective geometry/homogeneous coordinates 3D plot here&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve collected a list of blog posts, articles and videos links at the end of
this post if you&amp;rsquo;re interested.&lt;/p&gt;

&lt;p&gt;Without further dig in, this is helping, because it says that we
can now represent any point in our Cartesian plane (&lt;code&gt;$ z = 1 $&lt;/code&gt;) not only as
a &lt;code&gt;$2\text{Ã—}1$&lt;/code&gt; matrix, but also as a &lt;code&gt;$3\text{Ã—}1$&lt;/code&gt; matrix:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix}
x\\
y
\end{bmatrix}
\Leftrightarrow
\begin{bmatrix}
x\\
y\\
1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Which means we have to redefine all our previous transformation matrices,
because the product of a &lt;code&gt;$3\text{Ã—}1$&lt;/code&gt; matrix (position vector) by a
&lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; matrix (transformation) is &lt;em&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Don&amp;rsquo;t rage quit! It&amp;rsquo;s straightforward: &lt;code&gt;$\mathbf{z&#39;=z}$&lt;/code&gt;!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We have to find the transformation matrix &lt;code&gt;$
\mathbf{A} =
\begin{bmatrix} a &amp;amp; b &amp;amp; c\\ d &amp;amp; e &amp;amp; f\\ g &amp;amp; h &amp;amp; i \end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;If, like in the previous section, we imagine that we have the point
&lt;code&gt;$ P_{\left(x, y, z\right)} $&lt;/code&gt;, which represents any point of
an object on the cartesian plane, then we want to find the matrix to transform
it into &lt;code&gt;$ P&#39;_{\left(x&#39;, y&#39;, z&#39;\right)}$&lt;/code&gt; such that&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39;\\z&#39; \end{bmatrix} =
\mathbf{A} . \begin{bmatrix} x\\y\\z \end{bmatrix} =
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
.
\begin{bmatrix} x\\y\\z \end{bmatrix}
$$
&lt;/div&gt;

&lt;h3 id=&#34;scaling-1&#34;&gt;Scaling&lt;/h3&gt;

&lt;p&gt;We are looking for &lt;code&gt;$\mathbf{A}$&lt;/code&gt; such that:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39;\\z&#39; \end{bmatrix} =
\begin{bmatrix} s_{x}.x\\s_{y}.y\\z \end{bmatrix} =
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
.
\begin{bmatrix} x\\y\\z \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;We can solve the following system of equation in order to find &lt;code&gt;$\mathbf{A}$&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
x&#39; = s_{x} . x\\
\Rightarrow
s_{x} . x = a . x + b . y + c . z\\
\Rightarrow
a = s_{x} \text{ and } b = 0 \text{ and } c = 0
$$
    &lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
y&#39; = s_{y} . y\\
\Rightarrow
s_{y} . y = d . x + e . y + f + z\\
\Rightarrow
d = s_{y} \text{ and } e = 0 \text{ and } f = 0
$$
    &lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
z&#39; = z\\
\Rightarrow
z = g . x + h . y + i + z\\
\Rightarrow
g = 0 \text{ and } h = 0 \text{ and } i = 1
$$
    &lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The 3x3 scaling matrix for the factors
&lt;code&gt;$ \left(s_{x}, s_{y}\right) $&lt;/code&gt; is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix} s_{x} &amp; 0 &amp;0\\0 &amp; s_{y} &amp; 0\\0 &amp; 0 &amp; 1\end{bmatrix}
$$
&lt;/div&gt;

&lt;h3 id=&#34;reflexion-1&#34;&gt;Reflexion&lt;/h3&gt;

&lt;p&gt;For a reflexion around the &lt;code&gt;$x$&lt;/code&gt; axis we are looking for &lt;code&gt;$\mathbf{A}$&lt;/code&gt; such
that:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39;\\z&#39; \end{bmatrix} =
\begin{bmatrix} x\\-y\\z \end{bmatrix} =
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
.
\begin{bmatrix} x\\y\\z \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;We can solve the following system of equation in order to find &lt;code&gt;$\mathbf{A}$&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
x&#39; = x\\
\Rightarrow
x = a . x + b . y + c . z\\
\Rightarrow
a = 1 \text{ and } b = 0 \text{ and } c = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
y&#39; = -y\\
\Rightarrow
-y = d . x + e . y + f . z\\
\Rightarrow
d = 0 \text{ and } e = -1 \text{ and } f = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
z&#39; = z\\
\Rightarrow
z = g . x + h . y + i . z\\
\Rightarrow
g = 0 \text{ and } h = 0 \text{ and } i = 1
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The transformation matrix to reflect around the &lt;code&gt;$x$&lt;/code&gt; axis is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix}
1 &amp; 0 &amp; 0\\
0 &amp; -1 &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;For the reflexion around the &lt;code&gt;$y$&lt;/code&gt; axis we are looking for &lt;code&gt;$\mathbf{A}$&lt;/code&gt; such
that:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39;\\z&#39; \end{bmatrix} =
\begin{bmatrix} x\\-y\\z \end{bmatrix} =
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
.
\begin{bmatrix} x\\y\\z \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;We can solve the following system of equation in order to find &lt;code&gt;$\mathbf{A}$&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
x&#39; = -x\\
\Rightarrow
-x = a . x + b . y + c . z\\
\Rightarrow
a = -1 \text{ and } b = 0 \text{ and } c = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
y&#39; = y\\
\Rightarrow
y = d . x + e . y + f . z\\
\Rightarrow
d = 0 \text{ and } e = 1 \text{ and } f = 0
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
z&#39; = z\\
\Rightarrow
z = g . x + h . y + i . z\\
\Rightarrow
g = 0 \text{ and } h = 0 \text{ and } i = 1
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br&gt;&lt;/p&gt;

&lt;p&gt;The transformation matrix to reflect around the &lt;code&gt;$y$&lt;/code&gt; axis is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix}
-1 &amp; 0 &amp; 0\\
0 &amp; 1 &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;h3 id=&#34;shearing-1&#34;&gt;Shearing&lt;/h3&gt;

&lt;p&gt;Well, I&amp;rsquo;m a bit lazy here ðŸ¤—&lt;br /&gt;
You see the pattern, right? Third line always the same, third column always the
same.&lt;/p&gt;

&lt;p&gt;The transformation matrix to shear along the &lt;code&gt;$x$&lt;/code&gt; direction is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix}
1 &amp; \tan \left( -\alpha \right) &amp; 0\\
0 &amp; 1 &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
1 &amp; k_{x} &amp; 0\\
0 &amp; 1 &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}\\
\text{where } k \text{ is the shearing constant}
$$
&lt;/div&gt;

&lt;p&gt;Similarly, the transformation matrix to shear along the &lt;code&gt;$y$&lt;/code&gt; direction is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix}
1 &amp; 0 &amp; 0\\
\tan \left( -\beta \right) &amp; 1 &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}
=
\begin{bmatrix}
1 &amp; 0 &amp; 0\\
k_{y} &amp; 1 &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}\\
\text{where } k \text{ is the shearing constant}
$$
&lt;/div&gt;

&lt;h3 id=&#34;rotating&#34;&gt;Rotating&lt;/h3&gt;

&lt;p&gt;Same pattern, basically we just take the &lt;code&gt;$2\text{Ã—}2$&lt;/code&gt; rotation matrix
and add one row and one column whose entries are &lt;code&gt;$0$&lt;/code&gt;, &lt;code&gt;$0$&lt;/code&gt; and &lt;code&gt;$1$&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right) &amp; 0\\
\sin \left( \theta \right) &amp; \cos \left( \theta \right) &amp; 0\\
0 &amp; 0 &amp; 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;h3 id=&#34;translation&#34;&gt;Translation&lt;/h3&gt;

&lt;p&gt;And now it gets interesting, because we can define translations as
&lt;code&gt;$3\text{Ã—}3$&lt;/code&gt; matrices multiplication!&lt;/p&gt;

&lt;p&gt;We are looking for &lt;code&gt;$\mathbf{A}$&lt;/code&gt; such that:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} x&#39;\\y&#39;\\z&#39; \end{bmatrix} =
\begin{bmatrix} x+t_{x}\\y+t_{y}\\z \end{bmatrix} =
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
.
\begin{bmatrix} x\\y\\z \end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;We can solve the following system of equation in order to find &lt;code&gt;$\mathbf{A}$&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&#34;row row-same-height&#34;&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
x&#39; = x + t_{x} \\
\Rightarrow
x + t_{x} = a . x + b . y + c . z\\
\Rightarrow
a = 1 \text{ and } b = 0 \text{ and } c = t_{x}
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
y&#39; = y + t_{y}\\
\Rightarrow
y + t_{y} = d . x + e . y + f . z\\
\Rightarrow
d = 0 \text{ and } e = 1 \text{ and } f = t_{y}
$$
&lt;/div&gt;
    &lt;div class=&#34;col-md-4&#34;&gt;
$$
z&#39; = z\\
\Rightarrow
z = g . x + h . y + i . z\\
\Rightarrow
g = 0 \text{ and } h = 0 \text{ and } i = 1
$$
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;$3\text{Ã—}3$&lt;/code&gt; translation matrix for the translation
&lt;code&gt;$ \left(t_{x}, t_{y}\right) $&lt;/code&gt; is:&lt;/p&gt;

&lt;div&gt;
$$
\begin{bmatrix} a &amp; b &amp; c\\d &amp; e &amp; f\\g &amp; h &amp; i\end{bmatrix}
=
\begin{bmatrix} 1 &amp; 0 &amp; t_{x}\\0 &amp; 1 &amp; t_{y}\\0 &amp; 0 &amp; 1\end{bmatrix}
$$
&lt;/div&gt;

&lt;h2 id=&#34;matrices-wrap-up&#34;&gt;Matrices wrap-up&lt;/h2&gt;

&lt;p&gt;Obviously, you won&amp;rsquo;t have to go into all of these algebra stuff each
time you want to know what is the matrix you need to apply in order to do
your transformations.&lt;/p&gt;

&lt;p&gt;You can just use the following:&lt;/p&gt;

&lt;h3 id=&#34;reminder&#34;&gt;Reminder&lt;/h3&gt;

&lt;p&gt;Translation matrix:
&lt;code&gt;$
\begin{bmatrix}
1 &amp;amp; 0 &amp;amp; t_{x}\\
0 &amp;amp; 1 &amp;amp; t_{y}\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Scaling matrix:
&lt;code&gt;$
\begin{bmatrix}
s_{x} &amp;amp; 0 &amp;amp; 0\\
0 &amp;amp; s_{y} &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Shear matrix:
&lt;code&gt;$
\begin{bmatrix}
1 &amp;amp; \tan \left( - \alpha \right) &amp;amp; 0\\
\tan \left( - \beta \right) &amp;amp; 1 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
\text{ = }
\begin{bmatrix}
1 &amp;amp; k_{x} &amp;amp; 0\\
k_{y} &amp;amp; 1 &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Rotation matrix:
&lt;code&gt;$
\begin{bmatrix}
\cos \left( \theta \right) &amp;amp; -\sin \left( \theta \right) &amp;amp; 0\\
\sin \left( \theta \right) &amp;amp; \cos \left( \theta \right) &amp;amp; 0\\
0 &amp;amp; 0 &amp;amp; 1
\end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That&amp;rsquo;s neat! Now you can define your matrices easily, plus you know how it
works.&lt;/p&gt;

&lt;p&gt;One last thing: all the transformations we&amp;rsquo;ve seen are &lt;strong&gt;&lt;em&gt;centered around the
origin&lt;/em&gt;&lt;/strong&gt;.&lt;br /&gt;
How do we apply what we know in order to, for instance, zoom on a
specific point which is &lt;strong&gt;not&lt;/strong&gt; the origin, or rotate an object &lt;strong&gt;in place&lt;/strong&gt;,
around its center?&lt;/p&gt;

&lt;p&gt;The answer is &lt;strong&gt;&lt;em&gt;composition&lt;/em&gt;&lt;/strong&gt;: We must &lt;em&gt;compose&lt;/em&gt; our transformations by using
several other transformations.&lt;/p&gt;

&lt;h3 id=&#34;combination-use-case-pinch-zoom&#34;&gt;Combination use-case: pinch-zoom&lt;/h3&gt;

&lt;p&gt;Imagine you have a shape, like a square for instance, and you want to zoom in
at the center of the square, to mimic a pinch-zoom behaviour.&lt;br /&gt;
This transformation is composed of the following sequence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;move anchor point to origin: &lt;code&gt;$ \left( -t_{x}, -t_{y} \right) $&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;scale by &lt;code&gt;$ \left( s_{x}, s_{y} \right) $&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move back anchor point: &lt;code&gt;$ \left( t_{x}, t_{y} \right) $&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where &lt;code&gt;$t$&lt;/code&gt; is the anchor point of our scaling transformation (the center of
the square).&lt;/p&gt;

&lt;p&gt;Our transformations are defined by the first translation matrix
&lt;code&gt;$ \mathbf{C} $&lt;/code&gt;, the scaling matrix &lt;code&gt;$ \mathbf{B} $&lt;/code&gt;, and the last
translation matrix &lt;code&gt;$ \mathbf{A} $&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{C} =
\begin{bmatrix}
1 &amp; 0 &amp; -t_{x} \\
0 &amp; 1 &amp; -t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
\text{ , }
\mathbf{B} =
\begin{bmatrix}
s_{x} &amp; 0 &amp; 0 \\
0 &amp; s_{y} &amp; 0 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
\text{ and }
\mathbf{A} =
\begin{bmatrix}
1 &amp; 0 &amp; t_{x} \\
0 &amp; 1 &amp; t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;Because matrix multiplication is non-commutative, the order matters, so we will
apply them in reverse order (hence the reverse naming order).&lt;br /&gt;
The composition of these transformations gives us the following product:&lt;/p&gt;

&lt;div&gt;
$$
\begin{align}
\mathbf{A} . \mathbf{B} . \mathbf{C}
&amp;=
\begin{bmatrix}
1 &amp; 0 &amp; t_{x} \\
0 &amp; 1 &amp; t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
s_{x} &amp; 0 &amp; 0 \\
0 &amp; s_{y} &amp; 0 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
1 &amp; 0 &amp; -t_{x} \\
0 &amp; 1 &amp; -t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
1 &amp; 0 &amp; t_{x} \\
0 &amp; 1 &amp; t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
s_{x} &amp; 0 &amp; s_{x} . -t_{x} \\
0 &amp; s_{y} &amp; s_{y} . -t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}\\
\mathbf{A} . \mathbf{B} . \mathbf{C}
&amp;=
\begin{bmatrix}
s_{x} &amp; 0 &amp; s_{x} . -t_{x} + t_{x} \\
0 &amp; s_{y} &amp; s_{y} . -t_{y} + t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;Suppose we have the following points representing a square:
&lt;code&gt;$
\begin{bmatrix}
x_{1} &amp;amp; x_{2} &amp;amp; x_{3} &amp;amp; x_{4}\\
y_{1} &amp;amp; y_{2} &amp;amp; y_{3} &amp;amp; y_{4}\\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1
\end{bmatrix}
\text{ = }
\begin{bmatrix}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2\\
1 &amp;amp; 1 &amp;amp; 3 &amp;amp; 3\\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1
\end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert 2D plot with those 4 points&lt;/p&gt;

&lt;p&gt;And we want to apply a 2x zoom focusing on its center.&lt;br /&gt;
The new coordinates will be:&lt;/p&gt;

&lt;div&gt;
$$
\begin{align}
\begin{bmatrix}
x_{1}&#39; &amp; x_{2}&#39; &amp; x_{3}&#39; &amp; x_{4}&#39;\\
y_{1}&#39; &amp; y_{2}&#39; &amp; y_{3}&#39; &amp; y_{4}&#39;\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
&amp;=
\begin{bmatrix}
s_{x} &amp; 0 &amp; s_{x} . -t_{x} + t_{x} \\
0 &amp; s_{y} &amp; s_{y} . -t_{y} + t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
x_{1} &amp; x_{2} &amp; x_{3} &amp; x_{4}\\
y_{1} &amp; y_{2} &amp; y_{3} &amp; y_{4}\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
2 &amp; 0 &amp; 2 . \left(-3\right) + 3 \\
0 &amp; 2 &amp; 2 . \left(-2\right) + 2 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
2 &amp; 4 &amp; 4 &amp; 2\\
1 &amp; 1 &amp; 3 &amp; 3\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
2 &amp; 0 &amp; -3 \\
0 &amp; 2 &amp; -2 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
2 &amp; 4 &amp; 4 &amp; 2\\
1 &amp; 1 &amp; 3 &amp; 3\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}\\
\begin{bmatrix}
x_{1}&#39; &amp; x_{2}&#39; &amp; x_{3}&#39; &amp; x_{4}&#39;\\
y_{1}&#39; &amp; y_{2}&#39; &amp; y_{3}&#39; &amp; y_{4}&#39;\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
&amp;=
\begin{bmatrix}
1 &amp; 5 &amp; 5 &amp; 1\\
0 &amp; 0 &amp; 4 &amp; 4\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert 2D plot with the 8 points&lt;/p&gt;

&lt;h3 id=&#34;combination-use-case-rotate-image&#34;&gt;Combination use-case: rotate image&lt;/h3&gt;

&lt;p&gt;Now imagine you have an image in a view, the origin is not a the center of the
view, it is probably at the top-left corner (implementations may vary),
but you want to rotate the image at the center of the view.&lt;br /&gt;
This transformation is composed of the following sequence:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;move anchor point to origin: &lt;code&gt;$ \left( -t_{x}, -t_{y} \right) $&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;rotate by &lt;code&gt;$ \theta $&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;move back anchor point: &lt;code&gt;$ \left( t_{x}, t_{y} \right) $&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Where &lt;code&gt;$t$&lt;/code&gt; is the anchor point of our rotation transformation.&lt;/p&gt;

&lt;p&gt;Our transformations are defined by the first translation matrix
&lt;code&gt;$ \mathbf{C} $&lt;/code&gt;, the rotation matrix &lt;code&gt;$ \mathbf{B} $&lt;/code&gt;, and the last
translation matrix &lt;code&gt;$ \mathbf{A} $&lt;/code&gt;.&lt;/p&gt;

&lt;div&gt;
$$
\mathbf{C} =
\begin{bmatrix}
1 &amp; 0 &amp; -t_{x} \\
0 &amp; 1 &amp; -t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
\text{ , }
\mathbf{B} =
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right) &amp; 0 \\
\sin \left( \theta \right) &amp; \cos \left( \theta \right) &amp; 0 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
\text{ and }
\mathbf{A} =
\begin{bmatrix}
1 &amp; 0 &amp; t_{x} \\
0 &amp; 1 &amp; t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
$$
&lt;/div&gt;

&lt;p&gt;The composition of these transformations gives us the following product:&lt;/p&gt;

&lt;div&gt;
$$
\begin{align}
\mathbf{A} . \mathbf{B} . \mathbf{C}
&amp;=
\begin{bmatrix}
1 &amp; 0 &amp; t_{x} \\
0 &amp; 1 &amp; t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right) &amp; 0 \\
\sin \left( \theta \right) &amp; \cos \left( \theta \right) &amp; 0 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
1 &amp; 0 &amp; -t_{x} \\
0 &amp; 1 &amp; -t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
1 &amp; 0 &amp; t_{x} \\
0 &amp; 1 &amp; t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right) &amp; \cos \left( \theta \right) . -t_{x} + \sin \left( \theta \right) . -t_{y} \\
\sin \left( \theta \right) &amp; \cos \left( \theta \right) &amp; \sin \left( \theta \right) . -t_{x} + \cos \left( \theta \right) . -t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}\\
\mathbf{A} . \mathbf{B} . \mathbf{C}
&amp;=
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right) &amp; \cos \left( \theta \right) . -t_{x} - \sin \left( \theta \right) . -t_{y} + t_{x} \\
\sin \left( \theta \right) &amp; \cos \left( \theta \right) &amp; \sin \left( \theta \right) . -t_{x} + \cos \left( \theta \right) . -t_{y} + t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;Suppose we have the following points representing a square:
&lt;code&gt;$
\begin{bmatrix}
x_{1} &amp;amp; x_{2} &amp;amp; x_{3} &amp;amp; x_{4}\\
y_{1} &amp;amp; y_{2} &amp;amp; y_{3} &amp;amp; y_{4}\\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1
\end{bmatrix}
\text{ = }
\begin{bmatrix}
2 &amp;amp; 4 &amp;amp; 4 &amp;amp; 2\\
1 &amp;amp; 1 &amp;amp; 3 &amp;amp; 3\\
1 &amp;amp; 1 &amp;amp; 1 &amp;amp; 1
\end{bmatrix}
$&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert 2D plot with those 4 points&lt;/p&gt;

&lt;p&gt;And we want to apply a rotation of &lt;code&gt;$ \theta = 90Â° $&lt;/code&gt; focusing on its center.&lt;br /&gt;
The new coordinates will be:&lt;/p&gt;

&lt;div&gt;
$$
\begin{align}
\begin{bmatrix}
x_{1}&#39; &amp; x_{2}&#39; &amp; x_{3}&#39; &amp; x_{4}&#39;\\
y_{1}&#39; &amp; y_{2}&#39; &amp; y_{3}&#39; &amp; y_{4}&#39;\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
&amp;=
\begin{bmatrix}
\cos \left( \theta \right) &amp; -\sin \left( \theta \right) &amp; \cos \left( \theta \right) . -t_{x} - \sin \left( \theta \right) . -t_{y} + t_{x} \\
\sin \left( \theta \right) &amp; \cos \left( \theta \right) &amp; \sin \left( \theta \right) . -t_{x} + \cos \left( \theta \right) . -t_{y} + t_{y} \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
x_{1} &amp; x_{2} &amp; x_{3} &amp; x_{4}\\
y_{1} &amp; y_{2} &amp; y_{3} &amp; y_{4}\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
0 &amp; -1 &amp; 0 . \left(-3\right) - 1 . \left(-2\right) + 3 \\
1 &amp; 0 &amp; 1 . \left(-3\right) + 0 . \left(-2\right) + 2 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
2 &amp; 4 &amp; 4 &amp; 2\\
1 &amp; 1 &amp; 3 &amp; 3\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}\\
&amp;=
\begin{bmatrix}
0 &amp; -1 &amp; 5 \\
1 &amp; 0 &amp; -1 \\
0 &amp; 0 &amp; 1
\end{bmatrix}
.
\begin{bmatrix}
2 &amp; 4 &amp; 4 &amp; 2\\
1 &amp; 1 &amp; 3 &amp; 3\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}\\
\begin{bmatrix}
x_{1}&#39; &amp; x_{2}&#39; &amp; x_{3}&#39; &amp; x_{4}&#39;\\
y_{1}&#39; &amp; y_{2}&#39; &amp; y_{3}&#39; &amp; y_{4}&#39;\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
&amp;=
\begin{bmatrix}
4 &amp; 4 &amp; 2 &amp; 2\\
1 &amp; 3 &amp; 3 &amp; 1\\
1 &amp; 1 &amp; 1 &amp; 1
\end{bmatrix}
\end{align}
$$
&lt;/div&gt;

&lt;p&gt;&lt;code&gt;TODO&lt;/code&gt; Insert 2D plot with those 8 points&lt;/p&gt;

&lt;h2 id=&#34;acknowledgements&#34;&gt;Acknowledgements&lt;/h2&gt;

&lt;p&gt;I want to address my warmest thank you to the following people, who helped me
during the review process of this article, by providing helpful feedbacks and
advices:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Igor Laborie (&lt;a href=&#34;https://twitter.com/ilaborie&#34;&gt;@ilaborie&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Hadrien Toma&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.cs.utexas.edu/~fussell/courses/cs384g/lectures/lecture07-Affine.pdf&#34;&gt;A course on &amp;ldquo;Affine Transformation&amp;rdquo; at The University of Texas at Austin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://web.cse.ohio-state.edu/~whmin/courses/cse5542-2013-spring/6-Transformation_II.pdf&#34;&gt;A course on &amp;ldquo;Composing Transformations&amp;rdquo; at The Ohio State University&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://datagenetics.com/blog/august32013/&#34;&gt;A blogpost on &amp;ldquo;Rotating images&amp;rdquo; by Nick Berry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=h11ljFJeaLo&#34;&gt;A Youtube video course on &amp;ldquo;The Rotation Matrix&amp;rdquo; by Michael J. Ruiz&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Homogeneous_coordinates&#34;&gt;Wikipedia on Homogeneous coordinates&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tomdalling.com/blog/modern-opengl/explaining-homogenous-coordinates-and-projective-geometry/&#34;&gt;A blogpost on &amp;ldquo;Explaining Homogeneous Coordinates &amp;amp; Projective Geometry&amp;rdquo; by Tom Dalling&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.songho.ca/math/homogeneous/homogeneous.html&#34;&gt;A blogpost on &amp;ldquo;Homogeneous Coordinates&amp;rdquo; by Song Ho Ahn&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Xzu8_Fe3ImI&#34;&gt;A Youtube video course on &amp;ldquo;2D transformations and homogeneous coordinates&amp;rdquo; by Tarun Gehlot&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>I blog</title>
      <link>http://www.arnaudbos.com/start-blog/</link>
      <pubDate>Mon, 07 Nov 2016 12:55:28 +0100</pubDate>
      
      <guid>http://www.arnaudbos.com/start-blog/</guid>
      <description>

&lt;h2 id=&#34;what-s-this-post-about&#34;&gt;What&amp;rsquo;s this post about?&lt;/h2&gt;

&lt;p&gt;Publishing all my drafts in the open, because I want to be loved, yay narcissism.&lt;/p&gt;

&lt;h5 id=&#34;is-it-any-good&#34;&gt;Is it any good?&lt;/h5&gt;

&lt;p&gt;&lt;a href=&#34;http://news.ycombinator.com/item?id=3067434&#34;&gt;Yes&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>EclipseCon France 2016 â€” Review</title>
      <link>http://www.arnaudbos.com/eclipsecon-france-2016-review/</link>
      <pubDate>Wed, 13 Jul 2016 12:55:28 +0100</pubDate>
      
      <guid>http://www.arnaudbos.com/eclipsecon-france-2016-review/</guid>
      <description>


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/eclipsecon-france-2016-review/eclipsecon.jpg&#34; alt=&#34;Picture taken during the Keynote&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Keynote&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;hr /&gt;

&lt;p&gt;This ear, I&amp;rsquo;ve been given the opportunity to attend the French edition of the EclipseCon. It&amp;rsquo;s been the first time I could attend an event of this nature with Keynotes, workshops, talks and demos on various topics, informal talks with other attendees and speakers.&lt;/p&gt;

&lt;p&gt;Bellow is a feedback on &lt;strong&gt;my&lt;/strong&gt; experience of the EclipseCon France 2016.&lt;/p&gt;

&lt;p&gt;Schedule: &lt;a href=&#34;https://www.eclipsecon.org/france2016/conference/schedule/session/2016-06-07&#34;&gt;https://www.eclipsecon.org/france2016/conference/schedule/session/2016-06-07&lt;/a&gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;connecting-low-power-iot-devices-with-lora-mqtt-and-the-things-network&#34;&gt;Connecting low power IoT devices with LoRa, MQTT, and The Things Network&lt;/h2&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/eclipsecon-france-2016-review/iot.png&#34; alt=&#34;Eclipse IoT logo&#34;
            width=&#34;280px&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;&lt;br /&gt;
From my point of view, &lt;a href=&#34;http://iot.eclipse.org/&#34;&gt;IoT&lt;/a&gt; really was an important topic this year in Toulouse, most notably because of the presence of &lt;a href=&#34;https://www.thethingsnetwork.org/&#34;&gt;The Things Network&lt;/a&gt;, who&amp;rsquo;s been invited by the Eclipse Foundation to lead a workshop and give the first Keynote of the conference.&lt;/p&gt;

&lt;p&gt;This team, from Amsterdam, wants to federate people and communities anywhere in the world around their worldwide network dedicated to connected devices, based on the LoRa technology.&lt;/p&gt;

&lt;p&gt;So, what is LoRa? And what is The Things Network?&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;lora&#34;&gt;LoRa&lt;/h3&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/eclipsecon-france-2016-review/lora.png&#34; alt=&#34;LoRaWan logo&#34;
            width=&#34;280px&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Taken from the &lt;a href=&#34;https://www.lora-alliance.org/&#34;&gt;LoRa Alliance&lt;/a&gt; :&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoRa is a diminutive for LoRaWANâ„¢: Low Power Wide Area Network (LPWAM).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Without going into too much details (that I don&amp;rsquo;t master anyways), here&amp;rsquo;s what I can say:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;LoRa is a free and open wireless specification based on ISM radios bands (&lt;a href=&#34;https://en.wikipedia.org/wiki/ISM_band&#34;&gt;https://en.wikipedia.org/wiki/ISM_band&lt;/a&gt;).&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This technology particularly fits in as a network layer for communication of small, connected devices because it allows for localization and mobility of devices, low consumption, does not need a big or existing previous installation, and communication can go both ways (bi-directional).&lt;/p&gt;

&lt;p&gt;With a single antenna on top of a building in an urban area, or in fields, LoRa allows the connection of thousands of devices without loss, far more than a classic wireless gateway (WiFi, Bluetooth) and energy consumption is kept low and is less costly that a 3G gateway.&lt;/p&gt;

&lt;p&gt;A few examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Power networks: predict consumption and adapt to real needs&lt;/li&gt;
&lt;li&gt;Logistics: accurate delivery and moving targets&lt;/li&gt;
&lt;li&gt;Transportation: emergency calls&lt;/li&gt;
&lt;li&gt;Health: embedded measuring devices&lt;/li&gt;
&lt;li&gt;And a lot more&amp;hellip; all that wirelessly.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;LoRa competes with the &lt;a href=&#34;https://sigfox.com/&#34;&gt;Sigfox&lt;/a&gt; technology, that you&amp;rsquo;re obviously aware of if you&amp;rsquo;re working/living in Toulouse like I do. Nonetheless, the two have different approaches, as Sigfox&amp;rsquo;s technology is proprietary and implies license costs, whereas the LoRa specification is free and open.&lt;/p&gt;

&lt;p&gt;Some measures made by The Things Network, as well as a few tech characteristics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Dense urban environment: 500m to 3km&lt;/li&gt;
&lt;li&gt;Rural environment: 10-50km (up to 92km over lands)&lt;/li&gt;
&lt;li&gt;Up to 10.000 devices per gateway&lt;/li&gt;
&lt;li&gt;Up to 3 years batteries&lt;/li&gt;
&lt;li&gt;Very low consumption (and no &amp;ldquo;handshake&amp;rdquo;)&lt;/li&gt;
&lt;li&gt;Free, open license, in both emit and receive&lt;/li&gt;
&lt;li&gt;No previous installation required&lt;/li&gt;
&lt;li&gt;Multi-coverage (multiple gateways can relay the information)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Devices connecting to a LoRa network can be sorted into three categories:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;A) Uplink only, device initiates the communication and server can answer;
B) Device and network are in sync on a shooting window the data exchange;
C) Device constantly listening for updates.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Of course consumption depends on device category.&lt;/p&gt;

&lt;hr /&gt;

&lt;h3 id=&#34;the-things-network&#34;&gt;The Things Network&lt;/h3&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/eclipsecon-france-2016-review/ttn.png&#34; alt=&#34;The Things Network logo&#34;
            width=&#34;280px&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;&lt;a href=&#34;https://www.thethingsnetwork.org/&#34;&gt;The Things Network&lt;/a&gt; is a project born in Amsterdam, the goal is to build a worldwide, open distributed network for IoT devices.&lt;/p&gt;

&lt;p&gt;Following a crowdfunding campaign, the team has started to create a Web platform in order to allow connection of devices via brokers.&lt;/p&gt;

&lt;p&gt;All the source code of The Things Network is &lt;a href=&#34;https://github.com/TheThingsNetwork/&#34;&gt;open source and available on Github&lt;/a&gt;, according to their commitment to allow a vast adoption of these technologies.&lt;/p&gt;

&lt;p&gt;In parallel, their business entity sells &lt;a href=&#34;https://shop.thethingsnetwork.com/&#34;&gt;Starter kits&lt;/a&gt; for education purposes as well as gateways, and participates in workshops and trainings to allow people to equip their homes/neighborhoods/towns and initiate a global coverage movement.&lt;/p&gt;

&lt;p&gt;There already are communities around the world, mostly in Europe at this time. Those communities were sometimes initiated by the team members of The Things Network, who travel a lot to advocate for their project and the LoRa technology, and sometimes communities are spontaneously created by local people.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;what-every-java-developer-should-know-about-angularjs&#34;&gt;What every Java developer should know about AngularJS&lt;/h2&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/eclipsecon-france-2016-review/angular.png&#34; alt=&#34;AngularJS logo&#34;
            width=&#34;280px&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Everything&amp;rsquo;s in the title.&lt;/p&gt;

&lt;p&gt;This workshop was intended to developers who are more familiar with backend technologies and wanted to have an introduction at the most famous front-end framework of the moment: &lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The was articulated about an introduction to controllers, scopes, services and directives, based on a tiny project example.&lt;/p&gt;

&lt;p&gt;As a full-stack developer I think this workshop was well adapted to its audience, with an iterative process in order to introduce new concepts in turn on the tiny project.&lt;/p&gt;

&lt;p&gt;The speakers chose to have &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; at the basis of their example, in order to keep their audience, more used to classical object architectures than ECMAScript, in their comfort zone. My co-attendees had the occasion to have their feet wet in a project architecture modeled around interfaces and implementations, with generic types and inheritance. On the other hand, they&amp;rsquo;ve had to deal with the poor front-end development tooling of the Eclipse IDE.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s talk about tooling.&lt;/p&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;tooling&#34;&gt;Tooling&lt;/h2&gt;

&lt;p&gt;This year we (the attendees) had a lot of choice regarding sessions about the Eclipse tooling. Here are is a feedback on the tools I&amp;rsquo;ve been presented.&lt;/p&gt;

&lt;h3 id=&#34;jsdt-2-0&#34;&gt;JSDT 2.0&lt;/h3&gt;

&lt;p&gt;This talk was dedicated to the new version of the JavaScript Development Tools (JSDT), currently under development.&lt;/p&gt;

&lt;p&gt;The objectives of JSDT 2.0 are to support the tools and methods of the current state of the art of modern JavaScript development.&lt;/p&gt;

&lt;p&gt;At the moment, JSDT 2.0 benefits from a new parser, more powerful and robust than the previous one, which is able to handle the ECMAScript 6 specification.&lt;/p&gt;

&lt;p&gt;The other objectives are centered around the integration of packets managers (npm / bower), task builders (grunt, gulp), support of Node.js, and additional tools for debugging and browsers integrations (Chrome).&lt;/p&gt;

&lt;h3 id=&#34;the-state-of-docker-and-vagrant-tooling-in-eclipse&#34;&gt;The State of Docker and Vagrant Tooling in Eclipse&lt;/h3&gt;

&lt;p&gt;It&amp;rsquo;s been a few month I got myself interested in &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; and &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; and started to mess with them, especially for development and integration environments. The idea to setup and share with teams/contributors an immutable infrastructure and repeatable deployment processes is very exciting.&lt;/p&gt;

&lt;p&gt;In this talk, I&amp;rsquo;ve been showcased two Eclipse plugins, one for &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; integration and the other one for &lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt; integration.&lt;/p&gt;

&lt;p&gt;At the moment, the two plugins provide new &amp;ldquo;perspectives&amp;rdquo; to the Eclipse IDE, allowing to do everything (I mean, almost everything) you can do on the command line:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Create and manage Vagrant boxes&lt;/li&gt;
&lt;li&gt;Configure your Vagrantfile&lt;/li&gt;
&lt;li&gt;Create and manage virtual machines&lt;/li&gt;
&lt;li&gt;Create and manage Docker images&lt;/li&gt;
&lt;li&gt;List and manage Docker containers&lt;/li&gt;
&lt;li&gt;Edit Dockerfile&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I&amp;rsquo;m a little bit disappointed, even though I personally don&amp;rsquo;t have an affinity for IDE integrations of command lines tools (I like my git separated from my IDE for instance).&lt;/p&gt;

&lt;p&gt;Anyway it&amp;rsquo;s worth mentioning that all the developments made on these plugins are the work of developers who are doing it for free, there are not a lot of them, and like everybody else they have to mow their lawn and fix their home on weekends.
So thanks guys, and keep up the good work.&lt;/p&gt;

&lt;h2 id=&#34;continuous-delivery-pipeline-as-code-with-jenkins&#34;&gt;Continuous Delivery: Pipeline As Code With Jenkins&lt;/h2&gt;


&lt;figure  style=&#34;text-align: center;&#34;&gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/eclipsecon-france-2016-review/jenkins.png&#34; alt=&#34;Jenkins CI logo&#34;
            width=&#34;280px&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;I was very enthusiast to attend this talk. I&amp;rsquo;m very interested in the opportunity to manage build jobs in a pipeline-shaped way. I&amp;rsquo;m also interested in &amp;ldquo;Continuous Delivery&amp;rdquo; and in &amp;ldquo;Continuous Deployment&amp;rdquo; for that matter.&lt;/p&gt;

&lt;p&gt;So what was this talk about ? Mainly what I could describe as the ability of orchestration, interruption and resilience of build jobs. Nothing less&amp;hellip;&lt;/p&gt;

&lt;p&gt;Like said in &lt;a href=&#34;http://batmat.github.io/presentations/jenkins-pipeline-as-code/prez.html&#34;&gt;the slides&lt;/a&gt;, what happens when you have fairly complicated build jobs, requiring operator inputs and possibly the ability to run in parallel?&lt;/p&gt;

&lt;p&gt;Apart from creating multiple individual jobs, that you can link or chain later on, leave alone fail-fast and parallelism, there is no idiomatic way to do.&lt;/p&gt;

&lt;p&gt;This is the kind of problems &amp;ldquo;Jenkins Pipeline Plugins&amp;rdquo;, which is in reality, a set of plugins, is try to solve. At the core of it is a DSL, the &amp;ldquo;Pipeline DSL&amp;rdquo;, allowing to chain builds, as steps, and attach to each a set of configuration options, like parallelism for instance.&lt;/p&gt;

&lt;p&gt;It becomes possible, for example, to configure a few dozens look-alike (small variation) jobs shaping the basis (the dependencies of a cascading build job) and trigger the execution of all these builds in parallel, before the execution of the next build job which depends upon them. All of this while specifying that the &lt;strong&gt;complete&lt;/strong&gt; build sequence should stop in case of a failure of any of the base builds (fail-fast).&lt;/p&gt;

&lt;p&gt;For the record, the speaker showcased this example exactly, on a &lt;a href=&#34;https://www.docker.com/products/docker-swarm/&#34;&gt;Docker Swarm&lt;/a&gt; build cluster provided by a cloud provider:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;336 CPUs&lt;/li&gt;
&lt;li&gt;1.032 TiB RAM&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don&amp;rsquo;t we all have one like that in our basement?&lt;/p&gt;

&lt;p&gt;Anyways, I was really curious about the choice of a DSL, instead of a fully declarative description of the build pipeline thanks to configuration file(s).
It&amp;rsquo;s easy to envision how to describe via simple data structures like maps and collections, the orchestration of jobs and the description of each step.&lt;/p&gt;

&lt;p&gt;I did not get a clear answer except that: most of the contributors being Java developers, a DSL (which really looks like Java by the way) seemed a natural choice.&lt;/p&gt;

&lt;h2 id=&#34;conclusion&#34;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve fully enjoyed my first time at a conference. The organization was perfect and the quality of the speakers was very satisfying.&lt;/p&gt;

&lt;p&gt;I will be please to come over next year at the EclipseCon France 2017, and I recommend to any developer having the opportunity to attend it, to do so without hesitation.&lt;/p&gt;

&lt;p&gt;All of the Keynotes and talks have been video recorded and are available on the Eclipse Foundation&amp;rsquo;s &lt;a href=&#34;https://www.youtube.com/playlist?list=PLy7t4z5SYNaRJff0KBMbubOaj8gevvML4&#34;&gt;Youtube channel&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Nabaztag/tag internals</title>
      <link>http://www.arnaudbos.com/nabaztagtag-internals/</link>
      <pubDate>Mon, 06 Jun 2016 15:00:36 +0100</pubDate>
      
      <guid>http://www.arnaudbos.com/nabaztagtag-internals/</guid>
      <description>


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/Nabaztag.jpg&#34; alt=&#34;Photo of a dismantled Nabaztag/tag&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Nabaztag/tag&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated&lt;/strong&gt;: June 15th, 2016&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt;: June 6th, 2016&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object&lt;/strong&gt;: Detail what&amp;rsquo;s inside a Nabaztag/tag, with components references when possible.&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;p&gt;I&amp;rsquo;m obviously not the first one trying to recycle my Nabaztag. Previous dissections have been done by others so I will reuse what they have done and will keep it here as a reference for my own usage.&lt;/p&gt;

&lt;p&gt;Most of the information on this page come from &lt;a href=&#34;http://petertyser.com/nabaztag-nabaztagtag-dissection/&#34;&gt;this guy&lt;/a&gt;, so &lt;em&gt;thank you&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Pictures are from multiple sources (links at the bottom of this page) and I&amp;rsquo;ve made my own, mostly because I didn&amp;rsquo;t find pictures detailing the ears mechanism (DC motors, pulleys-belt and IR encoders).&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll notice my Nabaztag/tag&amp;rsquo;s plastic body turned a bit yellowish with the years, I&amp;rsquo;ll try to fix this with the &lt;a href=&#34;https://en.wikipedia.org/wiki/Retr0bright&#34;&gt;Retr0bright chemical mixture&lt;/a&gt; later on.&lt;/p&gt;

&lt;h2 id=&#34;front-view&#34;&gt;Front view&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/1-Front-view.jpg&#34; alt=&#34;Picture of Nabaztag/tag front view&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;




&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/5-Inside-front.jpg&#34; alt=&#34;Picture of Nabaztag/tag opened front view&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;So from this point of view we can see (top/down):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A button at the top;&lt;/li&gt;
&lt;li&gt;Two rotating, magnetic placeholders for the ears;&lt;/li&gt;
&lt;li&gt;4 LEDs with directional cones;&lt;/li&gt;
&lt;li&gt;An RFID reader at the center, in front of the main board;&lt;/li&gt;
&lt;li&gt;A microphone at the base of the rabbit;&lt;/li&gt;
&lt;li&gt;The main board but I don&amp;rsquo;t care about this one.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;back-view&#34;&gt;Back view&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/2-Back-view.jpg&#34; alt=&#34;Picture of Nabaztag/tag back view&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;




&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/6-Inside-back.jpg&#34; alt=&#34;Picture of Nabaztag/tag opened back view&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;At the rear, we can see (top/down):&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Two IR encoders to control the rotation of the ears, at the top;&lt;/li&gt;
&lt;li&gt;The WiFi antenna at the center, in green;&lt;/li&gt;
&lt;li&gt;A loudspeaker a the center just under the WiFi antenna;&lt;/li&gt;
&lt;li&gt;The small card at the bottom is the &amp;ldquo;power adapter&amp;rdquo;;&lt;/li&gt;
&lt;li&gt;A scroll wheel;&lt;/li&gt;
&lt;li&gt;A 3.5mm phone connector (headphone jack).&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;the-button&#34;&gt;The button&lt;/h2&gt;

&lt;p&gt;Will be reusable as is, it seems, so I don&amp;rsquo;t have much to say about this one.&lt;/p&gt;

&lt;h2 id=&#34;the-ears&#34;&gt;The ears&lt;/h2&gt;

&lt;p&gt;They are attached to the body via magnets and are really just two pieces of white plastic.&lt;/p&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/4-No-ears.jpg&#34; alt=&#34;Picture of Nabaztag/tag without its ears&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;At some point, Violet or one of its successor, used to sell colored ears (with patterns and all) for fun and profit. I wonder where they did all go. Anyway.&lt;/p&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/9-Ears-motors.jpg&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s ears mechanism&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;This is the internal view of the back of the rabbit once you&amp;rsquo;ve removed the black plastic case covering the ears mechanism.&lt;/p&gt;

&lt;p&gt;You can see it consists of two &amp;ldquo;classic DC motors&amp;rdquo;, wired to the rotating pads of the ears (on top) via pulleys-belts.&lt;/p&gt;

&lt;h3 id=&#34;the-dc-motors&#34;&gt;The DC motors&lt;/h3&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/12-DC-motor.jpg&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s ears DC motors&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;Plagiarizing &lt;a href=&#34;http://www.instructables.com/id/Hack-the-Nabaztag/?ALLSTEPS&#34;&gt;Hack the Nabaztag&lt;/a&gt;, here&amp;rsquo;s a description of the DC motors:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The motor wires are BROWN and RED. If you connect one to GND and one to
PWR, the ears will spin in one direction; if you swap them, they go in
the opposite direction.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;If you want the ears to be bidirectional, you will have to implement an
H-bridge - a hardware switch that reverses a motor&amp;rsquo;s polarity.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thanks, this is exactly what we&amp;rsquo;ll do eventually.&lt;/p&gt;

&lt;h3 id=&#34;the-ir-encoders&#34;&gt;The IR encoders&lt;/h3&gt;

&lt;p&gt;
&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/10-IR-encoder.jpg&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s ears IR encoder&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/11-Pulleys-belt.jpg&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s pulleys-belt and cogs mechanism&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;This time plagiarizing from &lt;a href=&#34;https://github.com/Oripy/Rabbity-Pi/wiki/Nabaztag-hardware-investigation&#34;&gt;Rabbity-Pi&lt;/a&gt;, here&amp;rsquo;s a description of the use of the IR encoder:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A IR encoder is used to control the rotation, a wheel with 20 tooth
passes in front of the IR sensor. Actually 3 of those tooth are missing
(in order to detect the absolute position). The Nabaztag is doing a full
rotation of the ears when booting in order to initialise the positioning.&lt;/p&gt;

&lt;p&gt;Numbering each teeth from 0 to 19, ear is vertical when teeth number 3 is
in front of the sensor, and horizontal when it is teeth number 13.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;And from &lt;a href=&#34;http://www.instructables.com/id/Hack-the-Nabaztag/?ALLSTEPS&#34;&gt;Hack the Nabaztag&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Each of the little blue chips has a small optical encoder on it: an IR
LED and a receiver that senses it. As the ear turns, a gear&amp;rsquo;s teeth pass
between the LED and receiver, and turn it &amp;lsquo;on&amp;rsquo; and &amp;lsquo;off&amp;rsquo;. The gear is
missing one single tooth, so the encoder knows: when its signal does NOT
get interrupted by the gear&amp;rsquo;s teeth, the ear is pointing forward. On
tooth 3, ears point up; on tooth 13, they are horizontal.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m a total electronic beginner and if you too, I&amp;rsquo;ve googled around and found this &lt;a href=&#34;https://youtu.be/Q9d3d-gNii8&#34;&gt;great video on How an Encoder Works&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;leds&#34;&gt;LEDs&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/LEDs.png&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s LEDs and cones&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;On this picture we can see four directional cones to lead the LEDs light onto the translucent case.&lt;/p&gt;

&lt;p&gt;The LEDs are soldered onto the board, and what you cannot see on this picture (and I forgot to take another one, duh) is that there is a fifth LED at the bottom of the main board, whose cone is aimed toward the bottom of the rabbit, to give some sort of &amp;ldquo;ambient light&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t want to start &amp;ldquo;doing electronics&amp;rdquo; by having to identify components and unsolder them, so I just won&amp;rsquo;t reuse the LEDs and experiment with simpler ones.&lt;/p&gt;

&lt;h2 id=&#34;rfid&#34;&gt;RFID&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/RFID.png&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s RFID reader&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;The RFID reader is also visible on the front picture, right at the center, between the LED cones and in front of the main board.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://petertyser.com/nabaztag-nabaztagtag-dissection/&#34;&gt;Nabaztagtag (Nabaztag v2) Dissection&lt;/a&gt; has more detailed information as he tried identify each component of the RFID reader. I am not going to use the RFID reader at first, and I can&amp;rsquo;t decide which technology (RFID, NFC, Bluetooth Low Energy?) I will use eventually, so I won&amp;rsquo;t try to reuse it either.&lt;/p&gt;

&lt;h2 id=&#34;microphone&#34;&gt;Microphone&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/Microphone.png&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s Microphone&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;




&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/16-Microphone.jpg&#34; alt=&#34;Detailed view of the microphone&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;I do not know if I will make use of the microphone &amp;ldquo;as is&amp;rdquo; yet. Maybe I will have to replace it, be it for compatibility reasons or sound quality.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.instructables.com/id/RabbitPi-the-Alexa-Enabled-IFTTT-Connected-Ear-Wig/?ALLSTEPS&#34;&gt;RabbitPi&lt;/a&gt;, MisterM has used a &lt;a href=&#34;https://www.raspberrypi.org/products/camera-module/&#34;&gt;Pi camera&lt;/a&gt; in his project to put where the Nabaztag/tag&amp;rsquo;s microphone and Karotz (Nabaztag V3) camera used to stand. And for the microphone, he used a webcam&amp;rsquo;s microphone.&lt;/p&gt;

&lt;p&gt;Although he hacked a Nabaztag V1 which does not have a microphone already, whereas my V2 has one, I have to admit that I&amp;rsquo;m very tempted to do the same thing (with the Pi camera). Plus I will not have to drill a hole, maybe just make it larger.&lt;/p&gt;

&lt;h2 id=&#34;wifi&#34;&gt;WiFi&lt;/h2&gt;

&lt;p&gt;The WiFi capabilities is added via two components as it seems, a wireless module attached to the back of the main board, and a WiFi antenna at the rear of the rabbit.&lt;/p&gt;

&lt;p&gt;
&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/Wireless.png&#34; alt=&#34;Detailed view of the wireless module&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/WiFi-antenna.png&#34; alt=&#34;Detailed view of the WiFi antenna&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;Again, at this point I think I am just not going to use this setup at find a standalone WiFi dongle that fits into the rabbit&amp;rsquo;s body. There are some &lt;a href=&#34;http://hackaday.com/2015/11/28/first-raspberry-pi-zero-hack-piggy-back-wifi/&#34;&gt;funny hacks&lt;/a&gt; out there, and also an &lt;a href=&#34;https://www.kickstarter.com/projects/1991736672/iot-hat-for-raspberry-pi-a-must-have-for-pi-zero/description&#34;&gt;interesting project&lt;/a&gt; to keep an eye on.&lt;/p&gt;

&lt;h2 id=&#34;loudspeaker&#34;&gt;Loudspeaker&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/6-Inside-back.jpg&#34; alt=&#34;Picture of Nabaztag/tag&amp;#39;s loudspeaker&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;p&gt;The loudspeaker is clearly visible at the center of the rabbit&amp;rsquo;s back. To me it looks like a basic sound speaker, nothing to be afraid of.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;http://www.instructables.com/id/RabbitPi-the-Alexa-Enabled-IFTTT-Connected-Ear-Wig/?ALLSTEPS&#34;&gt;RabbitPi&lt;/a&gt;, MisterM has used a phillips soundspeaker in place of the original one.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m not sure I understand why, plus it looks like it needs a battery instead of just being powered by the Nabaztag itself. But maybe I just missed an important information while reading his project.&lt;/p&gt;

&lt;h2 id=&#34;power&#34;&gt;Power&lt;/h2&gt;

&lt;p&gt;
&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/13-Power-adapter-back.jpg&#34; alt=&#34;Detailed back view of the power supply&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/14-Power-adapter-front.jpg&#34; alt=&#34;Detailed front view of the power supply&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;

&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m a bit lost, here.&lt;/p&gt;

&lt;p&gt;This is the power supply of the Nabaztag/tag, which comes with a cord that I have lost, I mean I think did. And even if I still have it, somewhere, I&amp;rsquo;m not quite sure what to do about it because I&amp;rsquo;m pretty sure this needs work to make the voltage and stuff in line with what the RaspberryPi needs/can sustain.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/Oripy/Rabbity-Pi/wiki/Nabaztag-hardware-investigation&#34;&gt;Rabbity-Pi&lt;/a&gt; summarizes my thinking almost accurately:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At first I wasn&amp;rsquo;t interested in re-using the Nabaztag power system but as
it provides a removable connector that may be easily connected to my
electronic board, I may reuse it. At least to power the motors, and maybe
the Raspberry-Pi itself if the voltage and other characteristics are
suitable.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a href=&#34;http://www.instructables.com/id/RabbitPi-the-Alexa-Enabled-IFTTT-Connected-Ear-Wig/?ALLSTEPS&#34;&gt;RabbitPi&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;I had planned to run the motors from a usb power bank so that I&amp;rsquo;d only
need a single power plug, but this turned out not to have enough grunt,
it wouldn&amp;rsquo;t even light up the &amp;ldquo;Working&amp;rdquo; led on the HAT. I decided instead
to use a DC power adaptor to run the HAT and ears, I conveniently had one
of those universal ones with interchangeable tips handy. What I didn&amp;rsquo;t
have was a DC socket to connect the adaptor to the HAT. [&amp;hellip;] I
remembered from the teardown that the Nabaztag&amp;rsquo;s original power lead was
a standard DC plug - therefore I could just re-wire the original power
socket to the HAT - neat! In the end I also re-used the original Nabaztag
power supply, as it provided just the right amount of power.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I&amp;rsquo;m too much of a beginner to know at first sight what I can/cannot do with a piece of electronics. My guts tell me that I can reuse this (and &lt;strong&gt;&lt;em&gt;me wants to reuse this&lt;/em&gt;&lt;/strong&gt;), but I will see what I can do with it when I&amp;rsquo;ll really begin messing with eletronics and get my hands dirty on some basic techniques.&lt;/p&gt;

&lt;h2 id=&#34;sound&#34;&gt;Sound&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/nabaztagtag-internals/15-Wheel-and-Jack.jpg&#34; alt=&#34;Detailed front view of the volume wheel and jack entry&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
&lt;/figure&gt;



&lt;h3 id=&#34;scroll-wheel&#34;&gt;Scroll wheel&lt;/h3&gt;

&lt;p&gt;I definitely want to keep this and use it for either sound volume control or other interaction.&lt;/p&gt;

&lt;p&gt;Again according to &lt;a href=&#34;http://www.instructables.com/id/Hack-the-Nabaztag/?ALLSTEPS&#34;&gt;Hack the Nabaztag&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The scroll wheel is a potentiometer: it measures voltage, which changes
as we rub the &amp;lsquo;wiper&amp;rsquo; up and down. This is an analog input, which the
Teensy will convert into a number between 0 and 1023.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;He&amp;rsquo;s talking about a a &lt;code&gt;Teensy&lt;/code&gt; because it&amp;rsquo;s the microcontroller he&amp;rsquo;s using. I &lt;em&gt;think&lt;/em&gt; my RaspberryPi also has one or two analog inputs (need to check), and I also think it is possible to add external ones in the mix, so no blocker here, just need to wire everything correctly.&lt;/p&gt;

&lt;h2 id=&#34;closing&#34;&gt;Closing&lt;/h2&gt;

&lt;p&gt;The following are two parts of &lt;a href=&#34;http://www.instructables.com/id/Hack-the-Nabaztag/?ALLSTEPS&#34;&gt;Hack the Nabaztag&lt;/a&gt; that I quote here for reference, I feel like they will prove useful.&lt;/p&gt;

&lt;p&gt;This section is called &amp;ldquo;&lt;strong&gt;Step 10: Wiring it up, for reals.&lt;/strong&gt;&amp;rdquo; and it summarizes some wiring order instructions and voltage information:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;At this point, if you&amp;rsquo;ve been working on a breadboard, it&amp;rsquo;s time to take
it all apart and re-solder it permanently. This is going to be a MESS of
wires, so pay close attention to where you route things - there&amp;rsquo;s less
space in that rabbit than you think!&lt;/p&gt;

&lt;p&gt;My recommendation: take your break-apart headers, and solder your wires
to them first, so that they are like breakaway extensions from the
existing wires. Do everything but the H-bridge; that&amp;rsquo;s a special case.
Once you have extension wires on all 5 sets (head, scroll, LEDs, and two
ears), temporarily mount the H-bridge and the Teensy somewhere on your
cardboard block. Route wires as carefully as you can into their final
places, and solder them into the Teensy. Finally, connect all the H
bridge wires to the motors and the Teensy.&lt;/p&gt;

&lt;p&gt;As a review, these are the pins, as I&amp;rsquo;ve placed them:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head button 14 (digital input)&lt;/li&gt;
&lt;li&gt;Scroll wheel 21 (analog input)&lt;/li&gt;
&lt;li&gt;LEDs 2 (output)&lt;/li&gt;
&lt;li&gt;Left motor enable 7 (output)&lt;/li&gt;
&lt;li&gt;Left motor reverse 8 (output)&lt;/li&gt;
&lt;li&gt;Left motor forward 9 (output)&lt;/li&gt;
&lt;li&gt;Right motor enable 10 (output)&lt;/li&gt;
&lt;li&gt;Right motor reverse 11 (output)&lt;/li&gt;
&lt;li&gt;Right motor forward 12 (output)&lt;/li&gt;
&lt;li&gt;Left encoder 18 (analog input) (with resistor &amp;ndash;&amp;gt; GND)&lt;/li&gt;
&lt;li&gt;Right encoder 19 (analog input) (with resistor &amp;ndash;&amp;gt; GND)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The power should be:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Head: NONE&lt;/li&gt;
&lt;li&gt;Scroll: 3.3V&lt;/li&gt;
&lt;li&gt;LEDs: 5V&lt;/li&gt;
&lt;li&gt;H-Bridge: 5V&lt;/li&gt;
&lt;li&gt;Encoder BLUE wires (with resistors): 5V&lt;/li&gt;
&lt;li&gt;Encoder YELLOW wires: 3.3V&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&amp;hellip; and you should have 6 wires going to GND.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This part is called &amp;ldquo;&lt;strong&gt;Step 11: Putting the Bunny back together.&lt;/strong&gt;&amp;rdquo;, and its name is pretty self explanatory:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Once you have all the wires soldered and heat-shinked, it&amp;rsquo;s time to wrap
up.&lt;/p&gt;

&lt;p&gt;First, make sure you&amp;rsquo;ve removed the existing power jack from the base of
the black column, then thread your USB micro cable through the white
base. If it doesn&amp;rsquo;t fit, shave some plastic off the cord&amp;rsquo;s head until it
does. Plug it into the Teensy, and you&amp;rsquo;re set for powering and updating
your new Bunny.&lt;/p&gt;

&lt;p&gt;Screw the black column back onto the white base. You don&amp;rsquo;t need the black
ring around the base anymore (though you can put it back if you like).&lt;/p&gt;

&lt;p&gt;Gently wiggle the white case over the electronics and back into place.
This might take a while. Just be patient - press wires out of the way,
shave off more cardboard, add tape where needed - until it all fits
again. It&amp;rsquo;s important to get the alignment right, or the ears will get
stuck against the body. If you run into this problem, place a thin
washer-magnet between the ear and the socket to give the ear some extra
clearance.&lt;/p&gt;

&lt;p&gt;Put the screws in, and you&amp;rsquo;re done - at least, with this part.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;p&gt;Pictures and information (really, all of it) courtesy of:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://petertyser.com/nabaztag-nabaztagtag-dissection/&#34;&gt;Nabaztagtag (Nabaztag v2) Dissection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.techrepublic.com/pictures/cracking-open-the-nabaztag-wi-fi-rabbit/6/&#34;&gt;Cracking open the Nabaztag Wi-Fi rabbit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Oripy/Rabbity-Pi/wiki/Nabaztag-hardware-investigation&#34;&gt;Rabbity-Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;Instructables&#34;&gt;Hack the Nabaztag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;Instructables&#34;&gt;RabbitPi&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>MR. P â€” Project outline</title>
      <link>http://www.arnaudbos.com/mr-p-outline/</link>
      <pubDate>Sun, 05 Jun 2016 00:22:34 +0100</pubDate>
      
      <guid>http://www.arnaudbos.com/mr-p-outline/</guid>
      <description>


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/mr-p-outline/nabaztags.png&#34; alt=&#34;Photo of several Nabaztag rabbits&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Nabaztag/tags&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;hr /&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Updated&lt;/strong&gt;: June 15th, 2016&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Created&lt;/strong&gt;: June 5th, 2016&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Object&lt;/strong&gt;: Kick-off of &amp;ldquo;Mr. P&amp;rdquo; project for &lt;a href=&#34;https://en.wikipedia.org/wiki/Nabaztag&#34;&gt;Nabaztag/tag&lt;/a&gt; rabbit resurection with a &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Naming&lt;/strong&gt;

&lt;ul&gt;
&lt;li&gt;Nabaztag means &amp;ldquo;rabbit&amp;rdquo; ;&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s a rabbit whose name is &amp;ldquo;Mr. Rabbit&amp;rdquo; in &lt;a href=&#34;https://en.wikipedia.org/wiki/Fantastic_Mr._Fox_(film)&#34;&gt;Fantastic Mr. Fox&lt;/a&gt; film, which I love ;&lt;/li&gt;
&lt;li&gt;There&amp;rsquo;s also a &amp;ldquo;Mr. Rabbit&amp;rdquo; in the &lt;a href=&#34;https://en.wikipedia.org/wiki/Utopia_(UK_TV_series)&#34;&gt;Utopia&lt;/a&gt; TV series, which I&amp;rsquo;m an absolute fan of ;&lt;/li&gt;
&lt;li&gt;I&amp;rsquo;ll use a &lt;a href=&#34;https://www.raspberrypi.org/&#34;&gt;Raspberry Pi&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h2 id=&#34;nabaztag&#34;&gt;Nabaztag&lt;/h2&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/mr-p-outline/Nabaztag.jpg&#34; alt=&#34;Photo of a dismantled Nabaztag/tag&#34;
            width=&#34;100%&#34;
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Nabaztag/tag&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;Here&amp;rsquo;s a really great introduction of what&amp;rsquo;s a Nabaztag(/tag), found at &lt;a href=&#34;http://www.instructables.com/id/RabbitPi-the-Alexa-Enabled-IFTTT-Connected-Ear-Wig/?ALLSTEPS&#34;&gt;RabbitPi&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The original Nabaztag &amp;quot;first smart rabbit&amp;quot; was released in 2005, billed
as an ambient home assistant (sound familiar Amazon &amp;amp; Google?) - arguably
it was the first &amp;quot;Internet of Things&amp;quot; thing and was in many ways way
ahead of its time, I bought one straightway. It sat on our mantelpiece
reading out daily weather forecasts and occasional notifications but
never had a lot of capability, relying on a WEP wi-fi connection and
proprietary software and servers to provide its text-to-speech (TTS)
services. It&#39;s hard to imagine now but at the time there wasn&#39;t that much
it could connect to, social media was barely a thing, Nokia ruled the
smartphone world and LED lightbulbs were an expensive novelty.

In coming years there followed two further versions, the Nabaztag:Tag and
the Karotz, both offered improved functionality but neither found its
niche in the marketplace, ultimately let down by hardware and software
limitations. The shame was that as soon as the supporting servers were
switched off the previously smart rabbits became little more than
ornaments. Several community projects tried to replace the services of
the &amp;quot;official&amp;quot; servers, and we did use &amp;quot;OpenKarotz&amp;quot; for a while, but this
too seemed to die off a year or two ago, leaving my rabbits silent and
immobile atop my speakers.

Anyway history lesson over! The upshot is that we fondly remember the
presence of the Nabaztag in our living room, and I wanted it back, but as
a proper modern IoT device.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Mine is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Nabaztag#Nabaztag.2Ftag&#34;&gt;Nabaztag/tag&lt;/a&gt;, the second version whose most noteworthy additions are a microphone and an RFID reader.&lt;/p&gt;

&lt;p&gt;Without going into too much details, here are the capabilities and internals of this rabbit by itself:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Top button ;&lt;/li&gt;
&lt;li&gt;Moving ear motor and ear position sensor (x2 ears) ;&lt;/li&gt;
&lt;li&gt;Microphone ;&lt;/li&gt;
&lt;li&gt;Sound speaker ;&lt;/li&gt;
&lt;li&gt;3.5 jack female output ;&lt;/li&gt;
&lt;li&gt;Volume wheel ;&lt;/li&gt;
&lt;li&gt;LEDs (x5) ;&lt;/li&gt;
&lt;li&gt;RFID sensor ;&lt;/li&gt;
&lt;li&gt;WiFi card ;&lt;/li&gt;
&lt;li&gt;Power adapter.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;raspberry-pi&#34;&gt;Raspberry Pi&lt;/h2&gt;

&lt;p&gt;Mine is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Raspberry_Pi#Specifications&#34;&gt;Model B Generation 1 revision 1.2&lt;/a&gt;:&lt;/p&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/mr-p-outline/Pi-model-B.png&#34; alt=&#34;Schema of a Raspberry Pi board&#34;
            
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Nabaztag/tag&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;I am planning to go for a &lt;a href=&#34;https://www.raspberrypi.org/products/pi-zero/&#34;&gt;Raspberry Pi Zero&lt;/a&gt; to reduce the real estate footprint inside the rabbit case eventually:&lt;/p&gt;


&lt;figure  &gt;
    
        &lt;img src=&#34;http://www.arnaudbos.com/img/mr-p-outline/Pi-zero.png&#34; alt=&#34;Design of a Raspberry Pi Zero&#34;
            
            /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h6&gt;&lt;em&gt;Nabaztag/tag&lt;/em&gt;&lt;/h6&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;



&lt;p&gt;But in the mean time, a full sized Model B will be alright, especially for learning purposes.&lt;/p&gt;

&lt;p&gt;The Pi runs &lt;a href=&#34;https://en.wikipedia.org/wiki/Raspbian&#34;&gt;Raspbian Jessie&lt;/a&gt; version 4.4 (2016-05-27), downloaded from &lt;a href=&#34;https://www.raspberrypi.org/downloads/raspbian/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;iot-skills&#34;&gt;IoT skills&lt;/h2&gt;

&lt;p&gt;At this very moment, I know almost nothing about IoT, electronics or robotics, and the only goal of this project is to learn and eventually play with &lt;a href=&#34;https://developer.amazon.com/alexa&#34;&gt;Amazon Alexa&lt;/a&gt; service.&lt;/p&gt;

&lt;p&gt;I also want to make something useful with my Nabaztag, which has became nothing more than a paperweight since almost ten years: I used it a little at the beginning but the use was very limited, and then the service was discontinued.&lt;/p&gt;

&lt;p&gt;My girlfriend at that time (now my wife), who offered it to me, often jokes about how I&amp;rsquo;m &amp;ldquo;not using this thing she bought me&amp;rdquo;. So now is time to prove her wrong and make something not useless out of it, not just some geeky gadget.&lt;/p&gt;

&lt;p&gt;So I am planning to use this project as a long running learning and hacking project for home automation.&lt;/p&gt;

&lt;h2 id=&#34;links&#34;&gt;Links&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/Oripy/Rabbity-Pi&#34;&gt;Rabbity-Pi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.instructables.com/id/Hack-the-Nabaztag/?ALLSTEPS&#34;&gt;Hack the Nabaztag&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.instructables.com/id/RabbitPi-the-Alexa-Enabled-IFTTT-Connected-Ear-Wig/?ALLSTEPS&#34;&gt;RabbitPi&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://petertyser.com/nabaztag-nabaztagtag-dissection/&#34;&gt;Nabaztagtag (Nabaztag v2) Dissection&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://louterrailloune.com/category/nabaztag/&#34;&gt;http://louterrailloune.com/category/nabaztag/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>