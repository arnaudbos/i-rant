<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>java on Arnaud Bos</title>
    <link>https://i-rant.arnaudbos.com/categories/java/</link>
    <description>Recent content in java on Arnaud Bos</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Mon, 13 Jan 2025 00:00:00 +0200</lastBuildDate>
    
	<atom:link href="https://i-rant.arnaudbos.com/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Loom - Part 5 - Reactive Streams</title>
      <link>https://i-rant.arnaudbos.com/loom-part-5-reactive-streams/</link>
      <pubDate>Mon, 13 Jan 2025 00:00:00 +0200</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-5-reactive-streams/</guid>
      <description>Part 5 in a series of articles about Project Loom.
In this part we re-implement our proxy service using a Reactive Streams API.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
Part 3 - Asynchronous code
Part 4 - Non-thread-blocking async I/O
Part 5 - Reactive Streams (this page)</description>
    </item>
    
    <item>
      <title>Loom - Part 4 - Non-thread-blocking async I/O</title>
      <link>https://i-rant.arnaudbos.com/loom-part-4-nio/</link>
      <pubDate>Fri, 08 May 2020 01:44:26 +0200</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-4-nio/</guid>
      <description>Part 4 in a series of articles about Project Loom.
In this part we re-implement our proxy service with non-thread-blocking asynchronous java NIO.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
Part 3 - Asynchronous code
Part 4 - Non-thread-blocking async I/O (this page)
Part 5 - Reactive Streams</description>
    </item>
    
    <item>
      <title>Loom - Part 3 - Asynchronous code</title>
      <link>https://i-rant.arnaudbos.com/loom-part-3-async/</link>
      <pubDate>Mon, 23 Dec 2019 18:56:06 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-3-async/</guid>
      <description>Part 3 in a series of articles about Project Loom.
In this part we re-implement our proxy service with an asynchronous API.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
Part 3 - Asynchronous code (this page)
Part 4 - Non-thread-blocking async I/O
Part 5 - Reactive Streams</description>
    </item>
    
    <item>
      <title>Loom - Part 2 - Blocking code</title>
      <link>https://i-rant.arnaudbos.com/loom-part-2-blocking/</link>
      <pubDate>Wed, 18 Dec 2019 12:11:16 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-2-blocking/</guid>
      <description>Part 2 in a series of articles about Project Loom.
In this part we implement a proxy service, the easiest way possible.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code (this page)
Part 3 - Asynchronous code
Part 4 - Non-thread-blocking async I/O
Part 5 - Reactive Streams</description>
    </item>
    
    <item>
      <title>Loom - Part 1 - It&#39;s all about Scheduling</title>
      <link>https://i-rant.arnaudbos.com/loom-part-1-scheduling/</link>
      <pubDate>Sat, 14 Dec 2019 15:38:37 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-1-scheduling/</guid>
      <description>Part 1 in a series of articles about Project Loom.
In this part we skim the surface of scheduling history before diving into the JVM.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale
Part 1 - It&amp;rsquo;s all about Scheduling (this page)
Part 2 - Blocking code
Part 3 - Asynchronous code
Part 4 - Non-thread-blocking async I/O</description>
    </item>
    
    <item>
      <title>Loom - Part 0 - Rationale</title>
      <link>https://i-rant.arnaudbos.com/loom-part-0-rationale/</link>
      <pubDate>Sat, 14 Dec 2019 15:38:21 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/loom-part-0-rationale/</guid>
      <description>Part 0 in a series of articles about Project Loom.
In this part I just talk about me, me, me, me and why I wrote this.
The companion code repository is at arnaudbos/untangled
If you&amp;rsquo;d like you could head over to
Part 0 - Rationale (this page)
Part 1 - It&amp;rsquo;s all about Scheduling
Part 2 - Blocking code
Part 3 - Asynchronous code
Part 4 - Non-thread-blocking async I/O</description>
    </item>
    
    <item>
      <title>2D Transformations with Android and Java</title>
      <link>https://i-rant.arnaudbos.com/2d-transformations-android-java/</link>
      <pubDate>Tue, 07 Feb 2017 02:30:04 +0100</pubDate>
      
      <guid>https://i-rant.arnaudbos.com/2d-transformations-android-java/</guid>
      <description>I my previous post, &amp;ldquo;Matrices for developers&amp;rdquo;, I&amp;rsquo;ve talked about matrices and how they can be used to compute 2D transformations.
In this post, I want to talk about how to apply what we know about matrices in order to perform 2D transformations, first using Java AWT and then with the Android SDK.
Affine transformations with Java When I was working on the project I mentioned at the beginning of the previous article, I was constantly moving back and forth between the JDK&amp;rsquo;s implementation of affine transformations and the Android SDK&amp;rsquo;s implementation of matrices.</description>
    </item>
    
  </channel>
</rss>